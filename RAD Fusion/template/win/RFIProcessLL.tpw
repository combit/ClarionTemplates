#!*****************************************************************************
#!                  Process Extension
#!*****************************************************************************
#EXTENSION(LLProcess, 'List and Label Process Extension'),PROCEDURE,Req(GlobalListLabel),hlp('List & Label Process Extension')
#SHEET,HSCROLL,ADJUST
  #INSERT(%StandardTabs)
#ENDSHEET
#AT(%LocalDataClassData)
  #INSERT(%LLDATA)
  #IF(%InvoiceStyle=%TRUE)
LLInvoiceBreak         LIKE(%BreakField)
  #ENDIF
  #FOR(%LLOtherBreakFields)
    #SET(%LLDeclareLocBreakField,'LLBreak' & %LLOtherBreakField)
%LLDeclareLocBreakField    LIKE(%LLOtherBreakField)
  #ENDFOR
#ENDAT
#LOCALDATA
LLExportFilesQ      QUEUE,PRE(LLExpf)                     !Process extension
Filename              CSTRING(255)
                    END
#ENDLOCALDATA
#AT(%ProcedureRoutines)
  #INSERT(%LLRoutines,''),NOINDENT
  #INSERT(%FieldGen,%RepFiles,%TRUE,%True),NOINDENT
  #INSERT(%Printing,%InvoiceStyle),NOINDENT
  #IF(%LLVersion <> 'Version 6')
    #INSERT(%ExportFunctions),NOINDENT
  #ENDIF
  #INSERT(%SendVarsLL,%False),NOINDENT
  #INSERT(%ManualVariables),NOINDENT
  #!#INSERT(%Flags)
#ENDAT
#AT(%WindowManagerMethodCodeSection, 'Init', '(),BYTE'),PRIORITY(9850)    #!Priority(8010)
  #IF(%RunDirect = 'Runtime Selection')
  #DECLARE(%ReturnVals,STRING)
  #SET(%ReturnVals,'(' & %Params)
   GlobalRequest = SelectRecord
   IF %RepLayProc%ReturnVals,LLAction,LLReportName,LLReportTitle,LLReportType,LLPrinterOptions,LLOutputFile,LLOutPutDir) = False
     #EMBED(%LLCancelSelectLayout,'LL Cancel selecting Layout')
     RETURN(LEVEL:Notify)                 
   ELSE
     LLReportName = CLIP(LLReportName)
     #EMBED(%LLAfterSelectLayout,'LL After selecting Layout')
     LLNameNoPath = LLReportName
     DO LLInitReport
     IF LLPrinterOptions = True
       #IF(%LLNonMDI=%False)
       Unlockthread           #<! No Clarion statements allowed past this point
       #ENDIF
       LLResult = LL.PrintOptionsDialog(LLhJob,LLHWind,LLReportTitle)    #<!Call List and Label's procedure and wait until user is done
       #IF(%LLNonMDI=%False)
       LockThread                           #<!Clarion statements allowed again
       #ENDIF
       IF LLResult <> 0
         #EMBED(%LLAfterPrinterOptions,'LL After Displaying printer options')
         LLResult = LL.PrintEnd(LLhJob,0)
         LL.CloseJob(LLhJob)
         POST(EVENT:CloseWindow)
         RETURN(LEVEL:Fatal)
       END
     END
     LLResult = LL.PrintGetOption(LLhJob,LLOptionCopiesSupported)
   END
  #ELSE
    LLL_:Ref = %PrimaryValue
    Access:LL_Replay.Tryfetch(LLL_:RefKey)
    LLReportName = CLIP(LLL_:FileName)
    LLNameNoPath = CLIP(LLReportName)
    LLReportTitle = LLL_:Description
    CASE CLIP(LLL_:Type)
    OF 'List'
      LLReportType = LL_Project_List
    OF 'Card'
      LLReportType = LL_Project_Card
    OF 'Label'
      LLReportType = LL_Project_Label
    END
    LLAction = %PreviewOpt
    LLPrinterOptions = %PrinterOpt
    RFIPages = LLL_:Pages
    DO LLInitReport
    IF LLPrinterOptions = True
      #IF(%LLNonMDI=%False)
      Unlockthread()           #<! No Clarion statements allowed past this point
      #ENDIF
      LLResult = LL.PrintOptionsDialog(LLhJob,LLHWind,LLReportTitle)    #<!Call List and Label's procedure and wait until user is done
      #IF(%LLNonMDI=%False)
      LockThread()                           #<!Clarion statements allowed again
      #ENDIF
      IF LLResult <> 0 
         #EMBED(%LLAfterPrinterOptions,'LL After Displaying printer options')
         POST(EVENT:CloseWindow)
         RETURN(LEVEL:Fatal)
      END
    END
    LLResult = LL.PrintGetOption(LLhJob,LLOptionCopiesSupported)
  #ENDIF
#ENDAT
#AT( %WindowManagerMethodCodeSection, 'Init', '(),BYTE'),PRIORITY(8030)
  #IF(%ProgressType <> 'Clarion Progress Bar')
    %Window{Prop:Text} = ''
    %Window{Prop:Height} = 0
    %Window{Prop:Width} = 0
  #ENDIF
#ENDAT
#AT(%ProcessManagerMethodCodeSection,'TakeRecord','(),BYTE'),PRIORITY(5600)
DO PrintOutToLL
  #IF(%ProgressType <> 'Clarion Progress Bar' and %ProgressType <> 'No Progress Window')
    #IF(%ProgressTextType='Static Text')
LLPrintText = '%PrintText'
    #ELSE
LLPrintText = %DynamicText
    #ENDIF
LLResult = LL.PrintSetBoxText(LLhJob, LLPrintText, ThisProcess.Percentile)            
  #ENDIF
IF LLResult = LLErrUserAborted 
  LLAbort = True
  RETURN LEVEL:Fatal
END
#ENDAT
#AT(%WindowManagerMethodCodeSection,'Run','(),BYTE'),PRIORITY(1000)
  #INSERT(%LLWindowRun)
#ENDAT
#AT(%WindowManagerMethodCodeSection,'Kill','(),BYTE'),PRIORITY(1000)
  #INSERT(%LLKillWindow)
#ENDAT
#AT(%ProcedureRoutines)
  #INSERT(%LLDefineVars),NOINDENT
  #INSERT(%PrintOutToLL),NOINDENT
#ENDAT
