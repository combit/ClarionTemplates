#!*************************************** LLWindowRun ***************************************
#GROUP(%LLWindowRun)
CASE 'X' !CLIP(LLL:Type)
OF 'List'
  %ThisObjectName.LLReportType = LL_Project_List
OF 'Label'
  %ThisObjectName.LLReportType = LL_Project_Label
OF 'Card'
  %ThisObjectName.LLReportType = LL_Project_Card
END
#!*************************************** LLKillWindow ***************************************
#GROUP(%LLKillWindow)
IF %ThisObjectName.LLPrinted > 0 AND %ThisObjectName.LLAbort = False 
  #EMBED(%LLInKillWindow,'LL About to Kill procedure')
  CASE %ThisObjectName.LLReportType
  OF LL_Project_List
    %ThisObjectName.LLResult = %ThisObjectName.PrintFieldsEnd(%ThisObjectName.Job)
  END
  %ThisObjectName.LLResult = %ThisObjectName.PrintEnd(%ThisObjectName.Job,0)
  IF %ThisObjectName.LLAction = 2
    #EMBED(%LLBeforePreviewDisplay,'LL Before Preview Call')
  #IF(%NotUseLLPreviewer = %True)
    %LLPreviewProcedure(CLIP(%ThisObjectName.LLPath) & CLIP(%ThisObjectName.LLNameNoPath) & '.ll')
  #ELSE
    #INSERT(%PreviewOptions)
    %ThisObjectName.LLReportName = CLIP(%ThisObjectName.LLReportName)
    %ThisObjectName.LLResult = %ThisObjectName.PreviewDisplay(%ThisObjectName.Job,%ThisObjectName.LLReportName,%ThisObjectName.LLPath,%ThisObjectName.LLHWind)
  #ENDIF
    #EMBED(%LLAfterPreviewDisplay,'LL After Preview Call')
    %ThisObjectName.LLResult = %ThisObjectName.PreviewDeleteFiles(%ThisObjectName.Job,%ThisObjectName.LLReportName,%ThisObjectName.LLPath)
    #EMBED(%LLAfterPreviewDelete,'LL After PreviewDeleteFiles method')
  END
ELSE
  #EMBED(%LLProcessAbortedKillWindow,'LL Process Aborted')
  %ThisObjectName.LLResult = %ThisObjectName.PrintEnd(%ThisObjectName.Job,0)     #<! Clean close the job file
  #EMBED(%AfterPrintEnd,'LL After PrintEnd method')
  IF %ThisObjectName.LLAction = 2
    #EMBED(%LLActionBeforePreviewDeleteFiles,'LL Before PreviewDeleteFiles method')
    %ThisObjectName.LLResult = %ThisObjectName.PreviewDeleteFiles(%ThisObjectName.Job,%ThisObjectName.LLReportName,%ThisObjectName.LLPath)
    #EMBED(%LLActionAfterPreviewDeleteFiles,'LL After PreviewDeleteFiles method')
  END
END
#EMBED(%BeforeCloseLLJob,'LL Before Closing LL Print job')
#! #INSERT(%PopulateExportedFiles),NOINDENT
%ThisObjectName.CloseJob(%ThisObjectName.Job)           #<!Close the job
#!****************************************************** LLRoutines ***********************
#GROUP(%LLRoutines,%Conditional)
#DECLARE(%FinalButtonStyle,LONG)
#DECLARE(%WhichLanguage,LONG)
#DECLARE(%UseFilePath,String)

LLStandardInit            ROUTINE
#IF(%DebugMode = %TRUE)
  LL.SetDebug(LL_DEBUG_CMBTLL)
#ENDIF
#!  LLPrinted          = 0
#!  LLAbort            = False
#IF(%LLPreviewDirectory='')
#!  LLPath             = ''
#ELSE
  #IF(SUB(%LLPreviewDirectory,1,1) = '!')
    #SET(%UseFilePath,CLIP(SUB(%LLPreviewDirectory,2,19)))
#!  LLPath             = %UseFilePath
  #ELSE
#!  LLPath             = '%LLPreviewDirectory'
  #ENDIF
#ENDIF
#!  IF LEN(LLPath) > 0
#!    IF SUB(LLPath,LEN(CLIP(LLPath)),1) <> '\' 
#!      LLPath = CLIP(LLPath) & '\'
#!    END
#!  END
#INSERT(%SetLanguage)
#!  LLhJob = LL.OpenJob(%WhichLanguage)
#IF(%LLVersion = 'Version 12' OR %LLVersion = 'Version 13' OR %LLVersion = 'Version 14' OR %LLVersion = 'Version 15')
#!  LLResult = LL.SetOptionString(LLhJob,LL_OptionStr_LicensingInfo,LLLicense)
#ENDIF
#!  IF LLhJob < 0 
#!    MESSAGE('Error was ' & LLhJob)
#!  END
  #EMBED(%LLSendOptions,'Before Sending Options to List & Label')
  #INSERT(%SendOptions)
  #EMBED(%LLStandardInit,'Manual define List and Label Report Parameters')
#INSERT(%DialogStyle)
#!  LLSendingData = False
#!  LL.SetDlgboxMode(%FinalButtonStyle)                 #<! Office 97 style
#!  LL.DefineVariableStart(LLhJob)                     #<!Empty any remaining definition in Variable buffer
#!  LL.DefineFieldStart(LLhJob)                         #<!Empty any remaining definition in Field buffer
#IF(%Conditional)
#!  DO LLCondition
#ELSE
#!  DO LLDefineVariables
#ENDIF
#!  DO LLDefineManualVariables
#!  LLSendingData = True
#!****************************************************** Define Layout ***********************
#GROUP(%DefineLayout)

DefineLayout           ROUTINE
  DATA
RFIRetVal     LONG

  CODE
#IF(%ModifyFactory=%False)
  IF GETINI('List and Label','Developer','','.\RFI.ini') <> 'Yes' 
    IF (ThisWindow.Request = ChangeRecord OR ThisWindow.Request = DeleteRecord) AND LLL_:FactoryDefault = True 
      BEEP
      MESSAGE(%FactoryMessage,'Cannot Change/Delete Factory Default',ICON:Hand,BUTTON:Ok,,1)
      EXIT
    END
  END
#ENDIF
  DO LLStandardInit
#DECLARE(%UseFilePath)
#IF(%LLGloDirectory)
  #IF(SUB(%LLGloDirectory,1,1) = '!')
    #SET(%UseFilePath,CLIP(SUB(%LLGloDirectory,2,254)))
  #ELSE
    #SET(%UseFilePath,%LLGloDirectory)
  #ENDIF
#ENDIF
  LLSavePath = LongPath()
#IF(%LLGloDirectory<> '')
  #IF(SUB(%LLGloDirectory,1,1) = '!')
  LLReportName = CLIP(%UseFilePath) & CLIP(LLReportName)
  LLPreviewPath = %UseFilePath
  #ELSE
  LLReportName = '%UseFilePath' & CLIP(LLReportName)
  LLPreviewPath = '%UseFilePath'
  #ENDIF
#ENDIF
#IF(%LLGloDirectory)
  SetPath(LLPreviewPath)
  IF ERROR()
    RFIRetVal = RFICreateDirectory(LLPreviewPath,LLSecurityAttributes)
  END
  SetPath(LLSavePath)
#ENDIF
#IF(%LLPrintConfigDir)
  IF ~EXISTS(%LLPrintConfigDir)
    RFIRetVal = RFICreateDirectory(%LLPrintConfigDir,LLSecurityAttributes)
  END
#ENDIF
  #EMBED(%LLBeforeDesign,'L&L - Before calling List & Label Designer ')
  SavePath = LongPath()
  DISPLAY()
#IF(%DesignNew = %True)
  LLResult = LL.DesignerProhibitAction(LLhJob,524)      #<!Remove 'New' from files menu
  #ENDIF
#IF(%DesignOpen = %True)
  LLResult = LL.DesignerProhibitAction(LLhJob,519)      #<!Remove 'Open' from files menu
#ENDIF
#IF(%DesignSaveAs = %True)
  LLResult = LL.DesignerProhibitAction(LLhJob,515)      #<!Remove 'Save As' from files menu
#ENDIF
#IF(%DesignRecentFiles = %True)
  LLResult = LL.DesignerProhibitAction(LLhJob,990)      #<!Remove Recent Files list from files menu
#ENDIF
#IF(%DesignMax = %True)
  LLResult = LL.DesignerProhibitAction(LLhJob,LL_SYSCOMMAND_MAXIMIZE)  #<!Do not allow designer to be maximised
#ENDIF
#IF(%DesignMin = %True)
  LLResult = LL.DesignerProhibitAction(LLhJob,LL_SYSCOMMAND_MINIMIZE)   #<!Do not allow designer to be minimised
#ENDIF
  SetCursor(CURSOR:Wait)
  LLResult = LL.DefineLayout(LLhJob, LLHWind, LLReportTitle, LLReportType, LLReportName)
  SetCursor(CURSOR:Arrow)
  SetPath(SavePath)
  #EMBED(%BeforeCloseLLJob,'LL Before Closing LL Print job')
  LL.CloseJob(LLhJob)
  #EMBED(%LLEndDefineVar,'End List and Label Define Variables Routine')
#!****************************************************** Send Vars to L&L ***********************
#GROUP(%SendVarsLL,%DemoData)
#IF(%DemoData)                                                        #!This should be deprecated, no need to send "demo" data anymore
CASE SELF.LLFieldType
OF LL_DATE
  SELF.LLString2 = TODAY() + 2378857
OF LL_TEXT
  SELF.LLString2 = SELF.LLString1
OF LL_Numeric
  SELF.LLString2 = 999999
OF LL_Boolean
  SELF.LLString2 = 1
END
#ENDIF
IF CLIP(SELF.LLReportType) = LL_Project_List                            #<! Code from SendVarsLL
  IF CLIP(SELF.LLFileType) = 'Variables' OR CLIP(SELF.LLFileType) = 'Both'
    ReturnValue = LL.DefineVariableExt(SELF.Job,SELF.LLString1,SELF.LLString2,SELF.LLFieldType,0)
  END
  IF CLIP(SELF.LLFileType) = 'Fields' OR CLIP(SELF.LLFileType) = 'Both' 
    ReturnValue = LL.DefineFieldExt(SELF.Job,SELF.LLString1,SELF.LLString2,SELF.LLFieldType,0)
  END
ELSE
  ReturnValue = LL.DefineVariableExt(SELF.Job,SELF.LLString1,SELF.LLString2,SELF.LLFieldType,0) #<! Should see (SELF.Job,SELF.LLString1,SELF.LLString2,SELF.LLFieldType,0)
END
#!****************************************************** Conditional Call ***********************
#GROUP(%CondRoutine)

LLConditional             ROUTINE
#DECLARE(%ConString1)
#EMBED(%LLStartDefineVar,'Begin List and Label Define Variables Routine')
#DECLARE(%ConRoutineName)
#FOR(%FileCond)
  #IF(%FileCond = 'LL_RepLay')
    #CYCLE
  #ENDIF
  #IF(%FileCond = 'LL_RepArea')
    #CYCLE
  #ENDIF
  #FIX(%File,%FileCond)
  #SET(%ConRoutineName,'Send' & %FileCond & 'ToLL')
  DO %ConRoutineName
#ENDFOR
#!****************************************************** Manual Variables ***********************
#GROUP(%ManualVariables)

LLDefineManualVariables         ROUTINE
  DATA
LLPages       LONG

  CODE
#! Defines manual report variables
#FOR(%RepManFields)
  #IF(%ManCondition<>'')
  IF EVALUATE('%ManCondition') = '1' 
  #ENDIF
  #IF(%ManualGroupName <> '')
    SELF.LLString1 = '%ManualGroupName.%RepManFieldName'
  #ELSE
    SELF.LLString1 = '%RepManFieldName'
  #ENDIF
  #IF(%RepManFieldType='RTF' OR %RepManFieldType='String'OR %RepManFieldType='HTML')
    SELF.LLString2Size = SIZE(%RepManFileField)
  #ELSE
    SELF.LLString2Size = 256
  #ENDIF
    SELF.LLString2 &= NEW(CSTRING(LLString2Size+1))
    SELF.LLString2 = ''
  #IF(%RepManFieldFormat)
    #IF(%RepManFieldType = 'Date')
    IF %RepManFileField > 0 
      SELF.LLString2 = %RepManFileField + 2378857
    ELSE
      SELF.LLString2 = '1e1000'
    END
    #ELSE
    SELF.LLString2 = FORMAT(%RepManFileField,@%RepManFieldFormat)         #<!Processed second choice
    #ENDIF
  #ELSE
    #IF(%RepManFieldType = 'Date')
    IF %RepManFileField > 0 
      SELF.LLString2 = %RepManFileField + 2378857
    ELSE
      SELF.LLString2 = '1e1000'
    END
    #ELSIF(%RepManFieldType = 'TIME')
    IF %RepManFileField > 0 
      SELF.LLString2 = %RepManFileField / 8640000
    ELSE
      SELF.LLString2 = '1e1000'
    END
    #ELSE
    SELF.LLString2 = %RepManFileField
   #ENDIF
#ENDIF
#CASE(%RepManFieldType)
#OF('String')
  SELF.LLFieldType = LL_Text
#OF('Numeric')
  SELF.LLFieldType = LL_Numeric
#OF('Boolean')
  SELF.LLFieldType = LL_Boolean
#OF('Date')
  SELF.LLFieldType = LL_Date
#OF('RTF')
  SELF.LLFieldType = LL_RTF
#OF('Drawing')
  SELF.LLFieldType = LL_Drawing
#OF('Barcode')
  SELF.LLFieldType = LL_Barcode
#OF('HTML')
  SELF.LLFieldType = LL_HTML
#ENDCASE
  SELF.LLFileType = 'Both'
  DO SendVarsToListAndLabel
  DISPOSE(SELF.LLString2)
#IF(%ManCondition<>'')
  END
#ENDIF
#ENDFOR
#EMBED(%LLEndManDefine,'After Defining List and Label Manual Variables Routine')
#!****************************************************** Relations **********************
#GROUP(%Relationships)
#FOR(%AllRelatedFiles)
  LLRelateParent = '%LLRelateParent'
  LLRelateChild = '%LLRelateChild'
  LLResult = LlDbAddTable(LLhJob,LLRelateParent,LLRelateParent)
  LLResult = LlDbAddTable(LLhJob,LLRelateChild,LLRelateChild)
#ENDFOR
#FOR(%AllRelatedFiles)
  SELF.LLRelateName = '%LLRelateName'
  SELF.LLRelateParent = '%LLRelateParent'
  SELF.LLRelateChild = 'SELF.LLRelateChild'
  SELF.LLResult = LL.DbAddTableRelation(SELF.Job,SELF.LLRelateParent,SELF.LLRelateChild,SELF.LLRelateName,SELF.LLRelateName)
#ENDFOR
#!****************************************************** Printing ***********************
#GROUP(%Printing,%InvoiceStyle)

LLInitReport              ROUTINE
  #EMBED(%TopOfInitReport,'LL Top of LLInitReport routine'),LEGACY
  LLHWind = 0{PROP:HANDLE}
  OPEN(LLMessageWindow)
  DISPLAY()
  DO LLStandardInit
#CASE(%ProgressType)
#OF('Abort, bar meter & text')
  LLProgressType = 0
#OF('Abort, bridge meter & text')
  LLProgressType = 1
#OF('Abort & text')
  LLProgressType = 5                                       
#OF('Bar meter & text')
  LLProgressType = 2
#OF('Bridge meter & text')
  LLProgressType = 3
#OF('Text Only')
  LLProgressType = 4
#OF('No Progress Window')
  LLProgressType = 6
#ENDCASE
#DECLARE(%UseFilePath)
#DECLARE(%UseProgressWindow,LONG)
#IF(%LLGloDirectory)
  #IF(Sub(%LLGloDirectory,1,1) = '!')
    #SET(%UseFilePath,CLIP(SUB(%LLGloDirectory,2,254)))
  #ELSE
    #SET(%UseFilePath,%LLGloDirectory)
  #ENDIF
#ENDIF
  LLSavePath = LongPath()
#IF(%LLGloDirectory<> '')
  #IF(SUB(%LLGloDirectory,1,1) = '!')
  LLReportName = CLIP(%UseFilePath) & CLIP(LLReportName)
  LLPreviewPath = %UseFilePath
  #ELSE
  LLReportName = '%UseFilePath' & CLIP(LLReportName)
  LLPreviewPath = '%UseFilePath'
  #ENDIF
#ENDIF
#IF(%LLGloDirectory)
  SetPath(LLPreviewPath)
  IF ERROR() 
    RFIRetVal = RFICreateDirectory(LLPreviewPath,LLSecurityAttributes)
  END
  SetPath(LLSavePath)
#ENDIF
#IF(%ProgressType <> 'Clarion Progress Bar' AND %ProgressType <> 'No Progress Window')
  #SET(%UseProgressWindow,%True)
#ELSE
  #SET(%UseProgressWindow,%False)
#ENDIF
  LLPrintText = '%PrintText'
  #EMBED(%LLBeforeOpening,'LL Before Opening With Box Start'),LEGACY
#IF(%LLVersion = 'Version 12' OR %LLVersion = 'Version 13' OR %LLVersion = 'Version 14' OR %LLVersion = 'Version 15')
  #IF(%AllowFaxing=%True)
    #IF(%FaxRecipNumber<> '')
  IF CLIP(%FaxRecipNumber) <> '' 
    LLOption = '"' & %FaxRecipNumber & '"'
    LLResult = LL.SetOptionString(LLhJob,LLOptionStr_Fax_Recipnumber,LLOption)
  END
    #ENDIF
    #IF(%FaxRecipName<> '')
  IF CLIP(%FaxRecipName) <> ''
    LLOption = %FaxRecipName
    LLResult = LL.SetOptionString(LLhJob,LLOptionStr_Fax_Recipname,LLOption)
  END
    #ENDIF
    #IF(%FaxSenderName<> '')
  IF CLIP(%FaxSenderName) <> '' 
    LLOption = %FaxSenderName
    LLResult = LL.SetOptionString(LLhJob,LLOptionStr_Fax_Sendername,LLOption)
  END
    #ENDIF
    #IF(%FaxSenderCompany<> '')
  IF CLIP(%FaxSenderCompany) <> ''
    LLOption = %FaxSenderCompany
    LLResult = LL.SetOptionString(LLhJob,LLOptionStr_Fax_Sendercompany,LLOption)
  END
    #ENDIF
    #IF(%FaxSenderDept<> '')
  IF CLIP(%FaxSenderDept) <> '' 
    LLOption = %FaxSenderDept
    LLResult = LL.SetOptionString(LLhJob,LLOptionStr_Fax_Senderdept,LLOption)
  END
    #ENDIF
    #IF(%FaxSenderBillingCode<> '')
  IF CLIP(%FaxSenderBillingCode) <> '' 
    LLOption = %FaxSenderBillingCode
    LLResult = LL.SetOptionString(LLhJob,LLOptionStr_Fax_Senderbillingcode,LLOption)
  END
    #ENDIF
  #ENDIF
#ENDIF
#IF(%LLPrinterName<>'')
  IF CLIP(%LLPrinterName) <> '' 
    LLResult = LL.SetPrinterInPrinterFile(LLhJob,LLReportType,LLReportName,-1,%LLPrinterName,LLNullString)
  #IF(%RecreateDriver=%True)
  ELSE
    LLResult = LL.SetPrinterToDefault(LLhJob,LLReportType,LLReportName)
  #ENDIF
  END
  #ELSE
    #IF(%RecreateDriver=%True)
  LLResult = LL.SetPrinterToDefault(LLhJob,LLReportType,LLReportName)
    #ENDIF
  #ENDIF
  IF LLPrinterOptions = True 
    UnlockThread()
  #IF(%UseProgressWindow=%True)
    LLResult = LL.PrintWithBoxStart(LLhJob, LLReportType, LLReportName, LL_PRINT_USERSELECT, LLProgressType, LLHWind, LLPrintText)
  #ELSE
    LLResult = LL.PrintStart(LLhJob, LLReportType, LLReportName, LL_PRINT_USERSELECT,0)
  #ENDIF
    LockThread()
  #IF(%OpenError = %True)
    #INSERT(%ErrorHandle)
  #ENDIF
    EXECUTE(LLAction)
      LLDest = 'FILE'
      LLDest = 'PRV'
      LLDest = 'PRN'
      LLDest = 'RTF'
      LLDest = 'HTML'
      LLDest = 'JPG'
      LLDest = 'EMF'
      LLDest = 'BMP'
      LLDest = 'PDF'
      LLDest = 'MHTML'
      LLDest = 'XML'
      LLDest = 'XLS'
      LLDest = 'TXT'
      LLDest = 'MSFAX'
      LLDest = 'TTY'
    END
      LLResult = LL.PrintSetOptionString(LLhJob,LL_PRNOPTSTR_EXPORT,LLDest)
    ELSE
      CASE LLAction
      OF 0                #<!User Select
        UnlockThread()
  #IF(%UseProgressWindow=%True)
        LLResult = LL.PrintWithBoxStart(LLhJob, LLReportType, LLReportName, LL_PRINT_USERSELECT, LLProgressType, LLHWind, LLPrintText)
  #ELSE
        LLResult = LL.PrintStart(LLhJob, LLReportType, LLReportName, LL_PRINT_USERSELECT,0)
  #ENDIF
        LockThread()
  #IF(%OpenError = %True)
        #INSERT(%ErrorHandle)
  #ENDIF
      OF 1                #<! to File
        UnlockThread()
  #IF(%UseProgressWindow=%True)
        LLResult = LL.PrintWithBoxStart(LLhJob, LLReportType, LLReportName, LL_PRINT_FILE, LLProgressType, LLHWind, LLPrintText)
  #ELSE
        LLResult = LL.PrintStart(LLhJob, LLReportType, LLReportName, LL_PRINT_FILE,0)
  #ENDIF
        LockThread()
  #IF(%OpenError = %True)
        #INSERT(%ErrorHandle)
  #ENDIF
      OF 2                #<! Preview
        UnlockThread()
  #IF(%UseProgressWindow=%True)
        LLResult = LL.PrintWithBoxStart(LLhJob, LLReportType, LLReportName, LL_PRINT_PREVIEW, LLProgressType, LLHWind, LLPrintText)
  #ELSE
        LLResult = LL.PrintStart(LLhJob, LLReportType, LLReportName, LL_PRINT_PREVIEW,0)
  #ENDIF
        LockThread()
    #IF(%OpenError = %True)
        #INSERT(%ErrorHandle)
    #ENDIF
        #EMBED(%LLAfterOpeningPre,'LL After Opening With Box Start - Preview'),LEGACY
      OF 3                #<! Print to printer
        UnlockThread()
    #IF(%UseProgressWindow=%True)
        LLResult = LL.PrintWithBoxStart(LLhJob, LLReportType, LLReportName, LL_PRINT_NORMAL, LLProgressType, LLHWind, LLPrintText)
    #ELSE
        LLResult = LL.PrintStart(LLhJob, LLReportType, LLReportName, LL_PRINT_NORMAL,0)
    #ENDIF
        LockThread()
    #IF(%OpenError = %True)
        #INSERT(%ErrorHandle)
    #ENDIF
        #EMBED(%LLAfterOpeningPrint,'LL After Opening With Box Start - Print'),LEGACY
      #IF(%LLVersion <> 'Version 6')
      OF 4
        #EMBED(%LLBeforeOpeningPrintRTF,'LL Before Opening - With Box Start - RTF EXPORT'),LEGACY
        LLExportType = 'RTF'
        DO SetLLExportOptions
        #EMBED(%LLAfterOpeningPrintRTF,'LL After Opening - With Box Start - RTF EXPORT'),LEGACY
    #IF(%OpenError = %True)
        #INSERT(%ErrorHandle)
    #ENDIF
      OF 5
        #EMBED(%LLBeforeOpeningPrintHTML,'LL Before Opening - With Box Start - HTML EXPORT'),LEGACY
        LLExportType = 'HTML'
        DO SetLLExportOptions
        #EMBED(%LLAfterOpeningPrintHTML,'LL After Opening - With Box Start - HTML EXPORT'),LEGACY
    #IF(%OpenError = %True)
        #INSERT(%ErrorHandle)
    #ENDIF
      OF 6
        #EMBED(%LLBeforeOpeningPrintJPG,'LL Before Opening - With Box Start - JPG EXPORT'),LEGACY
        LLExportType = 'PICTURE_JPEG'
        DO SetLLExportOptions
        #EMBED(%LLAfterOpeningPrintJPG,'LL After Opening - With Box Start - JPG EXPORT'),LEGACY
    #IF(%OpenError = %True)
        #INSERT(%ErrorHandle)
    #ENDIF
      OF 7
        #EMBED(%LLBeforeOpeningPrintEMF,'LL Before Opening - With Box Start - EMF EXPORT'),LEGACY
        LLExportType = 'PICTURE_EMF'
        DO SetLLExportOptions
        #EMBED(%LLAfterOpeningPrintEMF,'LL After Opening - With Box Start - EMF EXPORT'),LEGACY
        #IF(%OpenError = %True)
        #INSERT(%ErrorHandle)
        #ENDIF
      OF 8
        #EMBED(%LLBeforeOpeningPrintEMF,'LL Before Opening - With Box Start - BMP EXPORT'),LEGACY
        LLExportType = 'PICTURE_BMP'
        DO SetLLExportOptions
        #EMBED(%LLAfterOpeningPrintEMF,'LL After Opening - With Box Start - BMP EXPORT'),LEGACY
   #IF(%OpenError = %True)
        #INSERT(%ErrorHandle)
   #ENDIF
      OF 9
        #EMBED(%LLBeforeOpeningPrintPDF,'LL Before Opening - With Box Start - PDF EXPORT'),LEGACY
        LLExportType = 'PDF'
        DO SetLLExportOptions
        #EMBED(%LLAfterOpeningPrintPDF,'LL After Opening - With Box Start - PDF EXPORT'),LEGACY
   #IF(%OpenError = %True)
        #INSERT(%ErrorHandle)
   #ENDIF
      OF 10
        #EMBED(%LLBeforeOpeningPrintMHTML,'LL Before Opening - With Box Start - MHTML EXPORT'),LEGACY
        LLExportType = 'MHTML'
        DO SetLLExportOptions
        #EMBED(%LLAfterOpeningPrintMHTML,'LL After Opening - With Box Start - MHTML EXPORT'),LEGACY
   #IF(%OpenError = %True)
        #INSERT(%ErrorHandle)
   #ENDIF
      OF 11
        #EMBED(%LLBeforeOpeningPrintXML,'LL Before Opening - With Box Start - XML EXPORT'),LEGACY
        LLExportType = 'XML'
        DO SetLLExportOptions
        #EMBED(%LLAfterOpeningPrintXTML,'LL After Opening - With Box Start - XML EXPORT'),LEGACY
   #IF(%OpenError = %True)
        #INSERT(%ErrorHandle)
   #ENDIF
      OF 12
        #EMBED(%LLBeforeOpeningPrintXLS,'LL Before Opening - With Box Start - XLS EXPORT'),LEGACY
        LLExportType = 'XLS'
        DO SetLLExportOptions
        #EMBED(%LLAfterOpeningPrintXLS,'LL After Opening - With Box Start - XLS EXPORT'),LEGACY
   #IF(%OpenError = %True)
        #INSERT(%ErrorHandle)
   #ENDIF
      OF 13
        #EMBED(%LLBeforeOpeningPrintTXT,'LL Before Opening - With Box Start - TXT EXPORT'),LEGACY
        LLExportType = 'TXT'
        DO SetLLExportOptions
        #EMBED(%LLAfterOpeningPrintXTXT,'LL After Opening - With Box Start - TXT EXPORT'),LEGACY
   #IF(%OpenError = %True)
        #INSERT(%ErrorHandle)
   #ENDIF
      OF 14
        #EMBED(%LLBeforeOpeningPrintFAX,'LL Before Opening - With Box Start - FAX EXPORT'),LEGACY
        LLExportType = 'MSFAX'
        DO SetLLExportOptions
        #EMBED(%LLAfterOpeningPrintFAX,'LL After Opening - With Box Start - FAX EXPORT'),LEGACY
   #IF(%OpenError = %True)
        #INSERT(%ErrorHandle)
   #ENDIF
      OF 15
        #EMBED(%LLBeforeOpeningTTY,'LL Before Opening - With Box Start - TTY Export'),LEGACY
        LLExportType = 'TTY'
        DO SetLLExportOptions
        #EMBED(%LLAfterOpeningTTY,'LL After Opening - With Box Start - TTY EXPORT'),LEGACY
   #IF(%OpenError = %True)
        #INSERT(%ErrorHandle)
   #ENDIF
      END
    END
  #ENDIF
  #IF(%LLPreviewDirectory)
    #IF(SUB(%LLPreviewDirectory,1,1) = '!')
      #SET(%UseFilePath,CLIP(SUB(%LLPreviewDirectory,2,254)))
    #ELSE
      #SET(%UseFilePath,%LLPreviewDirectory)
    #ENDIF
  #ENDIF
  #IF(%LLPreviewDirectory<>'')
    LLSavePath = LongPath()
    #IF(%LLPreviewDirectory<> '')
      #IF(SUB(%LLPreviewDirectory,1,1) = '!')
    LLPreviewPath = %UseFilePath
      #ELSE
    LLPreviewPath = '%UseFilePath'
      #ENDIF
    #ENDIF
    Setpath(LLPreviewPath)
    IF ERROR() 
      RFIRetVal = RFICreateDirectory(LLPreviewPath,LLSecurityAttributes)
    END
    SetPath(LLSavePath)
    #EMBED(%LLBeforeSetPreviewPath,'LL Before Setting Path for Preview file'),LEGACY
    LLResult = LL.PreviewSetTempPath(LLhJob, LLPreviewPath)
    #EMBED(%LLAfterSetPreviewPath,'LL After Setting Path for Preview file'),LEGACY
  #ENDIF
    IF LLCopies > 1 
      #EMBED(%LLBeforeSetCopies,'LL Before setting copies'),LEGACY
      LLResult = LL.PrintSetOption(LLhJob,LL_OPTION_COPIES,LLCopies)
      LLResult = LL.PrintGetOption(LLhJob,LL_PRNOPT_COPIES_SUPPORTED)
      #EMBED(%LLAfterSetCopies,'LL After setting copies'),LEGACY
    END
  #IF(%InvoiceStyle=%False)
    #EMBED(%LLINITREPORT,'After Start List and Label - InitReport Routine'),LEGACY
    IF LLReportType = LL_Project_List 
      UnlockThread()
      LLResult = LL.PrintReport(LLhJob)
      LockThread()
    END
    CLOSE(LLMessageWindow)
  #EMBED(%LLENDINITREPORT,'End List and Label - InitReport Routine'),LEGACY
#ENDIF
#!========================================================================================
#GROUP(%ExportFunctions)

SetLLExportOptions        ROUTINE
  #EMBED(%LLBeforeExportOptions,'Before List and Label Export options'),LEGACY
  LLResult = LL.SetOptionString(LLhJob,LL_OptionStr_LLXPathList,LLOption)
  LLExportSetting = 'Export.File'
  LLResult = LL.XSetParameter(LLhJob, LL_LLX_Extensiontype_Export,LLExportType,LLExportSetting,LLOutputFile)
  LLExportSetting = 'Export.Path'
  LLResult = LL.XSetParameter(LLhJob, LL_LLX_Extensiontype_Export,LLExportType,LLExportSetting,LLOutPutDir)
  LLExportSetting = 'Export.Quiet'
  LLOption = '1'
  LLResult = LL.XSetParameter(LLhJob, LL_LLX_Extensiontype_Export,LLExportType,LLExportSetting,LLOption)
  LLExportSetting = 'Export.ShowResult'
#IF(%GloTriggerRun<>'')
  LLOption = %GloTriggerRun
#ELSE
  LLOption = False
#ENDIF
  #EMBED(%LLAfterShowResult,'LL After Setting Export.ShowResult'),LEGACY
  LLResult = LL.XSetParameter(LLhJob, LL_LLX_Extensiontype_Export,LLExportType,LLExportSetting,LLOption)
#IF(%RTFPlainInPDF=%True)
  IF CLIP(LLExportType) = 'PDF' 
    LLExportSetting = 'Verbosity.RTF'
    LLOption = '1'
     LLResult = LL.XSetParameter(LLhJob, LL_LLX_Extensiontype_Export,LLExportType,LLExportSetting,LLOption)
  END
#ENDIF
  UnlockThread()
#IF(%ProgressType <> 'No Progress Window')
  LLResult = LL.PrintWithBoxStart(LLhJob, LLReportType, LLReportName, LL_PRINT_EXPORT, LLProgressType, LLHWind, LLPrintText)
  #EMBED(%LLAfterPrintBoxStartExport,'LL After Print Box Start for Export'),LEGACY
#ELSE
  LLResult = LL.PrintStart(LLhJob, LLReportType, LLReportName, LL_PRINT_EXPORT,0)
#ENDIF
  LockThread()
  LLResult = LL.PrintSetOptionString(LLhJob,LL_PrnOptStr_Export,LLExportType)
  IF LLEmailReport = True AND RECORDS(LLEMailQueue) > 0 
  #EMBED(%LLBeforeEmail,'LL Before setting email options'),LEGACY
  #INSERT(%PopulateEmail)
    LLExportSetting = 'Export.SendAsMail'
    LLOption = True
    LLResult = LL.XSetParameter(LLhJob, LL_LLX_Extensiontype_Export,LLExportType,LLExportSetting,LLOption)
    LLExportSetting = 'Export.Mail.To'
    LLOption = LLFullMailTo
    LLResult = LL.XSetParameter(LLhJob, LL_LLX_Extensiontype_Export,LLExportType,LLExportSetting,LLOption)
    LLExportSetting = 'Export.Mail.CC'
    LLOption = LLFullMailCC
    LLResult = LL.XSetParameter(LLhJob, LL_LLX_Extensiontype_Export,LLExportType,LLExportSetting,LLOption)
    LLExportSetting = 'Export.Mail.BCC'
    LLOption = LLFullMailBCC
    LLResult = LL.XSetParameter(LLhJob, LL_LLX_Extensiontype_Export,LLExportType,LLExportSetting,LLOption)
    LLExportSetting = 'Export.Mail.Subject'
    LLOption = LLSubject
    LLResult = LL.XSetParameter(LLhJob, LL_LLX_Extensiontype_Export,LLExportType,LLExportSetting,LLOption)
    LLExportSetting = 'Export.Mail.Body'
    LLOption = LLBody
    LLResult = LL.XSetParameter(LLhJob, LL_LLX_Extensiontype_Export,LLExportType,LLExportSetting,LLOption)
#IF(%HTMLOneFilePerPage=%True)
    IF CLIP(LLExportType) = 'HTML' 
      LLExportSetting = 'Export.AllInOneFile'
      LLOption = '0'
      LLResult = LL.XSetParameter(LLhJob, LL_LLX_Extensiontype_Export,LLExportType,LLExportSetting,LLOption)
    END
#ENDIF
  #EMBED(%LLAfterEmail,'LL After setting email options'),LEGACY
  END
#!****************************************************** Local Data ***********************
#GROUP(%LLDATA)
#DECLARE(%LLDeclareLocBreakField)                       #!  Is this actually used?
#IF(%SupressChild=%True)
LLSavedParent          LIKE(%LLParentID)
#ENDIF

#GROUP(%FieldTypes)
#DECLARE(%LLBlobType)
#IF(InString(CLIP(%FieldType),'STRING CSTRING PSTRING MEMO PICTURE ANY PSTRING',1,1))
SELF.LLFieldType = LL_Text
  #IF(EXTRACT(%FieldUserOptions,'LL_RTF'))
SELF.LLFieldType = LL_RTF
  #ENDIF
  #IF(EXTRACT(%FieldUserOptions,'LL_HTML'))
SELF.LLFieldType = LL_HTML
  #ENDIF
  #IF(EXTRACT(%FieldUserOptions,'LL_DRAWING'))
SELF.LLFieldType = LL_DRAWING
  #ENDIF
#ENDIF
#IF(InString(CLIP(%FieldType),'Numeric BFLOAT4 BFLOAT8 BYTE DECIMAL PDECIMAL UNSIGNED USHORT SHORT SREAL REAL',1,1))
SELF.LLFieldType = LL_Numeric
#ENDIF
#IF(%FieldType='BLOB')
  #SET(%LLBlobType,EXTRACT(%FieldUserOptions,'BlobType_LL',1))
  #IF(%LLBlobType='RTF')
SELF.LLFieldType = LL_RTF
  #ELSIF(%LLBlobType='LL_HTML')
SELF.LLFieldType = LL_HTML
  #ELSIF(%LLBlobType='Drawing')
SELF.LLFieldType = LL_DRAWING
  #ELSE
SELF.LLFieldType = LL_Text
  #ENDIF
#ENDIF
#IF(%FieldType='Boolean')
SELF.LLFieldType = LL_Boolean
#ENDIF
#IF(%FieldType='DATE')
SELF.LLFieldType = LL_Date
#ENDIF                                                  
#IF(%FieldType='RTF')
SELF.LLFieldType = LL_RTF
#ENDIF
#IF(%FieldType='HTML')
SELF.LLFieldType = LL_HTML
#ENDIF
#IF(%FieldType='Drawing')
SELF.LLFieldType = LL_Drawing
#ENDIF
#IF(%FieldType='Barcode')
SELF.LLFieldType = LL_Barcode
#ENDIF
#IF(%FieldType='TIME')
SELF.LLFieldType = LL_Date
#ENDIF
#IF(InString(CLIP(%FieldType),'LONG ULONG'))
  #IF(SUB(UPPER(%FieldDisplayPicture),2,1) = 'D' OR SUB(UPPER(%FieldDisplayPicture),2,1) = 'T')
SELF.LLFieldType = LL_Date
  #ELSE
SELF.LLFieldType = LL_Numeric     
  #ENDIF
#ENDIF
#IF(InString(CLIP(%FieldType),'CLASS FILE GROUP KEY LIKE TYPE WINDOW QUEUE',1,1))
SELF.LLFieldType = 'Invalid field type ' & %FieldType & ' - ignored'
#ENDIF
#!********************************************* Error handling ****************************
#GROUP(%ErrorHandle)
#IF(%OpenError = %True)
IF SELF.LLResult <> 0 
  #IF(%ProcessError = 'Call a procedure')
  %ErrorProc%ErrorParams
  #ELSE
  MESSAGE(%ErrorText,'Error ' & SELF.LLResult & ' opening layout',ICON:Hand,BUTTON:Ok,,1)
  #ENDIF
END
#ENDIF
#!********************************************* Extract Files ****************************
#GROUP(%FieldGen,*%FileSource,%Multi,%AddType),PRESERVE
#DECLARE(%RoutineName)
#DECLARE(%String1)
#DECLARE(%PrefixLen)
#DECLARE(%LenField)
#DECLARE(%LLFileName)
#DECLARE(%Ignore,LONG)
#DECLARE(%ArrayCount)
#DECLARE(%ArrayCount2)
#DECLARE(%ArrayCount3)
#DECLARE(%ArrayCount4)
  #IF(%Multi)
    #FIX(%File,%RepFileName)
  #ELSE
    #FIX(%File,%FileSource)
  #ENDIF
  #SET(%LLFileName,EXTRACT(%FileUserOptions,'Name_LL',1))
  #FOR(%LLGloRenameFiles)
    #IF(%LLGloRenameFile = %File)
      #SET(%LLFileName,%LLGloFileRename)
    #ENDIF
  #ENDFOR
  #IF(%LLFileName='')
    #IF(%Multi)
      #SET(%LLFileName,%RepFileName)
    #ELSE
      #SET(%LLFileName,%FileSource)
    #ENDIF
  #ENDIF
  #IF(%AddType=%True)
SELF.LLFileType = '%RepUsage'                 #<! Set report usage
  #ENDIF
  #SET(%PrefixLen,LEN(%FilePrefix) + 2)
  #FOR(%Field)
    #IF(EXTRACT(%FieldUserOptions,'NO_LL'))
      #CYCLE
    #ENDIF
    #SET(%Ignore,%False)
    #FOR(%LLGloOverrideFields)
      #IF(%LLGloOverRideField = %Field)
        #IF(%LLGloRemoveRename = 'Do not send to List and Label')
          #SET(%Ignore,%True)
        #ENDIF
      #ENDIF
    #ENDFOR
    #IF(%Ignore)
      #CYCLE
    #ENDIF
    #IF(%FieldType='GROUP' or %FieldType='END')
      #CYCLE
    #ENDIF
    #IF(%FieldDimension1 > 0)
      #LOOP,For(%ArrayCount,1,%FieldDimension1)
        #IF(%FieldDimension2 > 0)
          #LOOP,FOR(%ArrayCount2,1,%FieldDimension2)
            #INSERT(%FieldDec,%ArrayCount,%ArrayCount2,0,0),NOINDENT
          #ENDLOOP
        #ELSE
          #INSERT(%FieldDec,%ArrayCount,0,0,0),NOINDENT
        #ENDIF
      #ENDLOOP
    #ELSE
      #INSERT(%FieldDec,0,0,0,0),NOINDENT
    #ENDIF
  #ENDFOR
#!============================================================================================
#GROUP(%FieldDec,%ArrayCount,%ArrayCount2,%ArrayCount3,%ArrayCount4)
#DECLARE(%OffSet,LONG)
#DECLARE(%FoundQuote,LONG)
#IF(NOT EXTRACT(%FieldUserOptions,'Name_LL'))
  #SET(%LenField,LEN(%Field) - %PrefixLen)
  #SET(%String1,SUB(%Field,%PrefixLen,%LenField + 1))
#ELSE
  #SET(%String1,SUB(EXTRACT(%FieldUserOptions,'Name_LL'),9,30))
#ENDIF
#IF(%LLGloUseFieldDesc=%True AND %FieldDescription)
  #SET(%String1,%FieldDescription)
  #LOOP
    #SET(%FoundQuote,InString('''',%String1))
    #IF(%FoundQuote)
      #SET(%String1,SUB(%String1,1,%FoundQuote - 1) & SUB(%String1,%FoundQuote+1,LEN(%String1) - %FoundQuote))
    #ELSE
      #BREAK
    #ENDIF
  #ENDLOOP
#ENDIF
#FOR(%LLGloOverrideFields)
  #IF(%LLGloOverRideField = %Field)
    #IF(%LLGloRemoveRename = 'Rename')
      #SET(%String1,%LLGloRenameTo)
    #ENDIF
  #ENDIF
#ENDFOR
#IF(SUB(%String1,LEN(CLIP(%String1)),1) = ')')
  #SET(%String1,SUB(%String1,1,LEN(CLIP(%String1)) - 1))
#ENDIF
#IF(%Target32)
  #IF(%ArrayCount2 > 0)
SELF.LLString1 = '%LLFileName' & '.' & '%String1' & '.' & '%String1_%ArrayCount_%ArrayCount2'
  #ELSIF(%ArrayCount > 0)
SELF.LLString1 = '%LLFileName' & '.' & '%String1' & '.' & '%String1_%ArrayCount'
  #ELSE
SELF.LLString1 = '%LLFileName' & '.' & '%String1'
  #ENDIF
#ELSE
  #IF(%ArrayCount2 > 0)
SELF.LLString1 = '%String1' & '.' & '%String1_%ArrayCount_%ArrayCount2'
  #ELSIF(%ArrayCount > 0)
SELF.LLString1 = '%String1' & '.' & '%String1_%ArrayCount'
  #ELSE
SELF.LLString1 = '%String1'
  #ENDIF
#ENDIF
#IF(%FieldType='BLOB')
SELF.LLBLOB &= %Field{PROP:Handle}
SELF.LLString2Size = %Field{PROP:Size}
SELF.LLString2 &= NEW(CSTRING(SELF.LLString2Size+1))
SELF.LLString2 = ''
SELF.LLString2[1:SELF.LLString2Size] = %Field[0:SELF.LLString2Size-1]
#ELSE
  #IF(%FieldType='STRING' OR %FieldType='CSTRING' OR %FieldType='PSTRING' OR %FieldType='MEMO')
SELF.LLString2Size = SIZE(%Field)
  #ELSE
SELF.LLString2Size = 128
  #ENDIF
SELF.LLString2 &= NEW(CSTRING(SELF.LLString2Size+1))
SELF.LLString2 = ''
  #IF(SUB(UPPER(%FieldDisplayPicture),2,1) = 'D' OR %FieldType='DATE')
    #IF(%ArrayCount > 0 OR %ArrayCount2 > 0 OR %ArrayCount3 > 0 OR %ArrayCount4 > 0)   #!If it is a date and an array
      #IF(EXTRACT(%FieldUserOptions,'DateOffSet_LL',1))
        #SET(%OffSet,EXTRACT(%FieldUserOptions,'DateOffSet_LL',1))
      #ELSE
        #SET(%OffSet,2378857)
      #ENDIF
      #IF(%ArrayCount > 0 AND %ArrayCount2 = 0)
IF %Field[%ArrayCount] > 0 
  SELF.LLString2 = %Field[%ArrayCount] + %OffSet
ELSE
  SELF.LLString2 = 0      !This one
END
      #ENDIF
      #IF(%ArrayCount > 0 AND %ArrayCount2 = 0)
IF %Field[%ArrayCount] > 0 
  SELF.LLString2 = %Field[%ArrayCount] + %OffSet
ELSE
  SELF.LLString2 = 0      !This one
END
      #ELSIF(%ArrayCount2 > 0 and %ArrayCount3 = 0)
IF %Field[%ArrayCount,%ArrayCount2] > 0 
  SELF.LLString2 = %Field[%ArrayCount,%ArrayCount2] + %OffSet
ELSE
  SELF.LLString2 = 0      !This one
END
      #ELSIF(%ArrayCount3 > 0 and %ArrayCount4 = 0)
IF %Field[%ArrayCount,%ArrayCount2,%ArrayCount3] > 0 
  SELF.LLString2 = %Field[%ArrayCount,%ArrayCount2,%ArrayCount3] + %OffSet
ELSE
  SELF.LLString2 = 0      !This one
END
      #ELSIF(%ArrayCount4 > 0)
IF %Field[%ArrayCount,%ArrayCount2,%ArrayCount3,%ArrayCount4] > 0 
  SELF.LLString2 = %Field[%ArrayCount,%ArrayCount2,%ArrayCount3,%ArrayCount4] + %OffSet
ELSE
  SELF.LLString2 = 0      !This one
END
      #ENDIF
    #ELSE                                               #!Otherwise it is just a date field - no array
IF %Field > 0 
      #IF(EXTRACT(%FieldUserOptions,'DateOffSet_LL',1))
        #SET(%OffSet,EXTRACT(%FieldUserOptions,'DateOffSet_LL',1))
  SELF.LLString2 = %Field[%ArrayCount] + %OffSet
      #ELSE
  SELF.LLString2 = %Field + 2378857
      #ENDIF
ELSE
  SELF.LLString2 = '1e1000'
END
    #ENDIF
  #ELSIF (SUB(UPPER(%FieldDisplayPicture),2,1) = 'T' OR %FieldType='TIME')
    #IF(%ArrayCount > 0 OR %ArrayCount2 > 0 OR %ArrayCount3 > 0 OR %ArrayCount4 > 0)   #!If it is a time and an array
      #IF(EXTRACT(%FieldUserOptions,'TimeOffSet_LL',1))
        #SET(%OffSet,EXTRACT(%FieldUserOptions,'TimeOffSet_LL',1))
      #ELSE
        #SET(%OffSet,8640000)
      #ENDIF
      #IF(%ArrayCount > 0 AND %ArrayCount2 = 0)
IF %Field[%ArrayCount] > 0 
  SELF.LLString2 = %Field[%ArrayCount] + %OffSet
ELSE
  SELF.LLString2 = 0      !This one
END
      #ENDIF
      #IF(%ArrayCount > 0 AND %ArrayCount2 = 0)
IF %Field[%ArrayCount] > 0 
  SELF.LLString2 = %Field[%ArrayCount] + %OffSet
ELSE
  SELF.LLString2 = 0      !This one
END
      #ELSIF(%ArrayCount2 > 0 AND %ArrayCount3 = 0)
IF %Field[%ArrayCount,%ArrayCount2] > 0 
  SELF.LLString2 = %Field[%ArrayCount,%ArrayCount2] + %OffSet
ELSE
  SELF.LLString2 = 0      !This one
END
      #ELSIF(%ArrayCount3 > 0 AND %ArrayCount4 = 0)
IF %Field[%ArrayCount,%ArrayCount2,%ArrayCount3] > 0 
  SELF.LLString2 = %Field[%ArrayCount,%ArrayCount2,%ArrayCount3] + %OffSet
ELSE
  SELF.LLString2 = 0      !This one
END
    #ELSIF(%ArrayCount4 > 0)
IF %Field[%ArrayCount,%ArrayCount2,%ArrayCount3,%ArrayCount4] > 0 
  SELF.LLString2 = %Field[%ArrayCount,%ArrayCount2,%ArrayCount3,%ArrayCount4] + %OffSet
ELSE
  SELF.LLString2 = 0      !This one
END
    #ENDIF
  #ELSE                                               #!Otherwise it is just a time field - no array
IF %Field > 0 
  SELF.LLString2 = %Field / 8640000
ELSE
  SELF.LLString2 = 0
END
  #ENDIF
#ELSE
  #IF(%ArrayCount > 0 and %ArrayCount2 = 0)
SELF.LLString2 = %Field[%ArrayCount]
  #ELSIF(%ArrayCount2 > 0 and %ArrayCount3 = 0)
SELF.LLString2 = %Field[%ArrayCount,%ArrayCount2]
  #ELSIF(%ArrayCount3 > 0 and %ArrayCount4 = 0)
SELF.LLString2 = %Field[%ArrayCount,%ArrayCount2,%ArrayCount3]
  #ELSIF(%ArrayCount4 > 0)
SELF.LLString2 = %Field[%ArrayCount,%ArrayCount2,%ArrayCount3,%ArrayCount4]
  #ELSE
SELF.LLString2 = %Field
  #ENDIF
#ENDIF
#ENDIF
#INSERT(%FieldTypes)
#!SELF.SendVarsToListAndLabel
SELF.RetVal = SELF.DefineVariableExt(SELF.Job,SELF.LLString1,SELF.LLString2,SELF.LLFieldType,0)
SELF.RetVal = SELF.DEfineFieldExt(SELF.Job,SELF.LLString1,SELF.LLString2,SELF.LLFieldType,0)
DISPOSE(SELF.LLString2)

#!==================================================================================================
#GROUP(%SendOptions)
%LLInstance.LLResult = %LLInstance.SetOption(%LLInstance.Job,LL_Option_SupportPageBreak,%SupportTextPageBreak)
%LLInstance.LLResult = %LLInstance.SetOption(%LLInstance.Job,LL_Option_VarsCaseSensitive,%CaseSensitiveVars)
%LLInstance.LLResult = %LLInstance.SetOption(%LLInstance.Job,LL_Option_MultipleTableLines,%MultiTableLines)
%LLInstance.LLResult = %LLInstance.SetOption(%LLInstance.Job,LL_Option_SortVariables,%SortVars)
%LLInstance.LLResult = %LLInstance.SetOption(%LLInstance.Job,LL_Option_ConvertCRLF,%ConvertCRLF)
%LLInstance.LLResult = %LLInstance.SetOption(%LLInstance.Job,LL_Option_HelpAvailable,%LLHelpAvailable)
%LLInstance.LLResult = %LLInstance.SetOption(%LLInstance.Job,LL_Option_NoParameterCheck,%NoParamCheck)
%LLInstance.LLResult = %LLInstance.SetOption(%LLInstance.Job,LL_Option_NoNoTableCheck,%NoTableCheck)
%LLInstance.LLResult = %LLInstance.SetOption(%LLInstance.Job,LL_Option_SpaceOptimization,%SpaceOptimize)
%LLInstance.LLResult = %LLInstance.SetOption(%LLInstance.Job,LL_Option_DelayTableHeader,%DelayTableHead)
%LLInstance.LLResult = %LLInstance.SetOption(%LLInstance.Job,LL_Option_Supervisor,%Supervisor)
%LLInstance.LLResult = %LLInstance.SetOption(%LLInstance.Job,LL_Option_CompressStorage,%GloLLCompressPreview)
%LLInstance.LLResult = %LLInstance.SetOption(%LLInstance.Job,83,16)       #<!Sketch_Color_Depth
#IF(%LLVersion = 'Version 12' or %LLVersion = 'Version 13' OR %LLVersion = 'Version 14' OR %LLVersion = 'Version 15')
%LLInstance.LLResult = %LLInstance.SetOption(%LLInstance.Job,LL_Option_NOFILEVERSIONUPGRADEWARNING,%LLWarnVersion)
#ENDIF
#!==================================================================================================
#GROUP(%PreviewOptions)
#IF(%PreviewSendTo = %True)
  SELF.LLResult = %LLInstance.ViewerProhibitAction(%LLInstance.LLhJob,115)    #<! Remove Send To menu item
#ENDIF
#IF(%PreviewSaveAs = %True)
  SELF.LLResult = %LLInstance.ViewerProhibitAction(%LLInstance.LLhJob,116)    #<! Remove Save As menu item
#ENDIF
  #EMBED(%LLAfterSendingPreviewActions,'LL After Sending Previewer Actions'),LEGACY
#!==================================================================================================
#GROUP(%DialogStyle)
#CASE(%ButtonStyle)
#OF('Standard Windows Style')
  #SET(%FinalButtonStyle,1)
#OF('Win95 Button Style')
  #SET(%FinalButtonStyle,9)
#OF('Flat Buttons')
  #SET(%FinalButtonStyle,10)
#ENDCASE
#IF(%ButtonThreeDee = %True)
  #SET(%FinalButtonStyle,%FinalButtonStyle + 32768)
#ENDIF
#IF(%ToolTips = %True)
  #SET(%FinalButtonStyle,%FinalButtonStyle + 2048)
#ENDIF
#IF(%NoBitMaps = %True)
  #SET(%FinalButtonStyle,%FinalButtonStyle + 8192)
#ENDIF
#!==================================================================================================
#GROUP(%SetLanguage)
#CASE(%Language)
#OF('English')
  #SET(%WhichLanguage,1)
#OF('German')
  #SET(%WhichLanguage,0)
#OF('Greek')
  #SET(%WhichLanguage,19)
#OF('French')
  #SET(%WhichLanguage,18)
#OF('Catalan')
  #SET(%WhichLanguage,8)
#OF('Danish')
  #SET(%WhichLanguage,12)
#OF('Dutch')
  #SET(%WhichLanguage,13)
#OF('Hungarian')
  #SET(%WhichLanguage,21)
#OF('Italian')
  #SET(%WhichLanguage,24)
#OF('Norwegian')
  #SET(%WhichLanguage,29)
#OF('Portuguese')
  #SET(%WhichLanguage,31)
#OF('Spanish')
  #SET(%WhichLanguage,37)
#OF('Swedish')
  #SET(%WhichLanguage,38)
#ENDCASE
#!==================================================================================================
#GROUP(%DummyWindow)
LLWindow WINDOW,AT(,,1,1),FONT('MS Sans Serif',8,,FONT:regular),CENTER,GRAY,MAXIMIZE,NOFRAME
     END

#GROUP(%Flags)
  SELF.LLString2Size = 128
  SELF.LLString2 &= NEW(CSTRING(SELF.LLString2Size+1))
  SELF.LLString2 = ''
  SELF.LLString1 = 'Flags.PageOverFlow'
  SELF.LLString2 = LLPageOverflow
  SELF.LLFieldType = LL_Numeric
  DO SendVarsToListAndLabel
  DISPOSE(SELF.LLString2)
  SELF.LLString2Size = 128
  SELF.LLString2 &= NEW(CSTRING(LLString2Size+1))
  SELF.LLString2 = ''
  SELF.LLString1 = 'Flags.PageType'
  SELF.LLString2 = SELF.LLPages         !This is from the flags group
  SELF.LLFieldType = LL_Numeric
  DO SendVarsToListAndLabel
  DISPOSE(SELF.LLString2)
#!==================================================================================================
#GROUP(%StandardTabs)
#BUTTON('Tables to Send'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
  #DISPLAY('You need to indicate which tables NOT to send to List && Label (if any).  By default all tables in the schematic are sent, this is a list of exceptions.  Also note that any tables with NOPOPULATE in the options of the dictionary are already excluded.'),AT(10,,180,45),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
  #BUTTON('&Select Tables to withold sending to List && Label'),MULTI(%RepFiles,%RepFileName & '  -  ' & %RepUsage),INLINE,PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #PROMPT('File:',FILE),%RepFileName,REQ,PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #PROMPT('Usage:',DROP('Variables|Fields|Both')),%RepUsage,Default('Both'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
  #ENDBUTTON
#!  #DISPLAY('By default, the two control files LL_Replay and LL_RepArea are not made available to users for reporting. You may however, override this'),AT(10,,180,30)
#!  #PROMPT('Make file LL_Replay available',Check),%LLSendReplay,AT(10)
#!  #PROMPT('Make file LL_RepArea available',Check),%LLSendRepArea,AT(10)
#!  #BOXED('')
#!    #DISPLAY('REMEMBER:- You MUST have LL_RepLay and')
#!    #DISPLAY('LL_RepArea in your file schematic!'),AT(58)
#!  #ENDBOXED
#ENDBUTTON
#BUTTON('&Select Report Layout'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
  #DISPLAY('')
  #PROMPT('Runtime Select of Layout or Direct call',OPTION),%RunDirect,PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
  #PROMPT('Runtime Selection',RADIO),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
  #PROMPT('Use Variable to Determine Default',RADIO),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
  #ENABLE(%RunDirect = 'Runtime Selection')
    #DISPLAY('Please select the procedure that you will use to select a report layout. To examine the prototype, press the button below.'),AT(,,180,30),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #BUTTON('Procedure &Prototype'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
      #DISPLAY('ProcName(LONG Area,BYTE Action,CSTRING RptName,|'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
      #DISPLAY('         CSTRING RptTitle,LONG RptType,LONG PrinterOpt,|'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
      #DISPLAY('         CSTRING OutPutFile,CSTRING OutPutDir)'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
      #BOXED(''),PROP(PROP:Bevel,1),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
        #DISPLAY('Area = The report area value'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
        #DISPLAY('Action = Report action; preview, print, output file'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
        #DISPLAY('RptName = The report name'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
        #DISPLAY('RptTitle = The title heading of the report'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
        #DISPLAY('PrintOpt = Printer options; duplex, color, etc'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
        #DISPLAY('OutputFile = Name of file on disk'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
        #DISPLAY('OutPutDir = Folder name where the outfile file lives'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
      #ENDBOXED
    #ENDBUTTON
    #DISPLAY()
#!    #PROMPT('Layout Selection Proc:',PROCEDURE),%RepLayProc,DEFAULT(%DefaultProc)
#!    #PROMPT('Report Area Value',@s255),%Params,REQ
  #ENDENABLE
  #ENABLE(%RunDirect = 'Use Variable to Determine Default')
    #DISPLAY('Enter the Variable which holds the primary value'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #DISPLAY('to look up LLL_:Ref'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #PROMPT('Primary Variable: ',FIELD),%PrimaryValue,REQ,PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #BUTTON('Notes on Primary Variables'),AT(50,,130),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
      #DISPLAY('If you are using a runtime variable to determine the layout to use, then you must declare a variable (LONG) which you must populate in your embed code, to hold the value of LLL_:Ref so that the correct layout can be retrieved before the printing starts.'),AT(,,160,50),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #ENDBUTTON
    #PROMPT('Variable for Output option: ',FIELD),%PreviewOpt,PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #BUTTON('Notes on Preview and Export Options'),AT(50,,130),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
      #DISPLAY('If you are using a runtime variable to determine the layout to use, then you must also populate a variable (BYTE) in your embed code, with the type of output that you require'),AT(,,160,35),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
      #DISPLAY('The values are:-'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
      #DISPLAY('  2 - Preview'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
      #DISPLAY('  3 - Printer'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
      #DISPLAY('  4 - RTF'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
      #DISPLAY('  5 - HTML'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
      #DISPLAY('  6 - JPEG'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
      #DISPLAY('  7 - EMF'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
      #DISPLAY('  8 - BMP'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
      #DISPLAY('  9 - PDF'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
      #DISPLAY('  10 - MHTML'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
      #DISPLAY('  11 - XML'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
      #DISPLAY('  12 - XLS (Excel)'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
      #DISPLAY('  13 - TXT (Text)'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
      #DISPLAY('  14 - MS Fax (Where installed)'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
      #DISPLAY('For example, if you are using a variable called LLRTOutput, and you wanted to output to RTF then you would put'),AT(,,160,30),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
      #DISPLAY('   LLRTOutput = 4'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
      #DISPLAY('at the start of your procedure.  If you are exporting the report to a file, you MUST also populate the fields LLOutPutDir and LLOutputFile'),AT(10,,180,30),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #ENDBUTTON
    #PROMPT('Variable for Printer options: ',FIELD),%PrinterOpt,PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #BUTTON('Notes on Printer Options'),AT(50,,130),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
      #DISPLAY('If you are using a runtime variable to determine the layout to use, then you may also declare a variable (BYTE) which is a flag to indicate if the printer options screen is to appear before the print is started.  This will allow the users to select printers, start at specific labels on a sheet etc.'),at(,,160,50),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
      #DISPLAY('Setting this variable to TRUE will cause the printer options to appear before printing starts, whilst setting the variable to FALSE will mean that printing will start without the options window appearing'),AT(,,160,50),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #ENDBUTTON
  #ENDENABLE
#ENDBUTTON
#BUTTON('Define Manual Fields'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
  #DISPLAY('In this section you may define a variable which you wish'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
  #DISPLAY('to include in List && Label.  These fields may be functions'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
  #DISPLAY('such as Today() or Clock() or any valid Clarion expression'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
  #DISPLAY('')
  #BUTTON('Manual &fields'),MULTI(%RepManFields,%RepManFieldName & ' (' & %RepManFieldType & ') - ' & %RepManFileField),INLINE,PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #PROMPT('Field &name:',@S60),%RepManFieldName,REQ,PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #PROMPT('Field &type:',DROP('String|Numeric|Boolean|Date|TIME|RTF|HTML|Drawing|Barcode')),%RepManFieldType,PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #PROMPT('&Expression/Field:',EXPR),%RepManFileField,PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #PROMPT('Field &format:',@S60),%RepManFieldFormat,PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #BOXED(''),HIDE
      #PROMPT('Condition (Opt): ',@S255),%ManCondition,PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #ENDBOXED
  #ENDBUTTON
#ENDBUTTON
#BUTTON('Binding Fields'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
  #DISPLAY('Any fields that are used in Clarion expressions must'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
  #DISPLAY('be BINDed.  You can do this yourself in the embeded'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
  #DISPLAY('code or add the fields here'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
  #BUTTON('Fields/Procs to BIND'),MULTI(%Binds,%Binder),INLINE,PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #PROMPT('Fields/Procs to BIND',@s30),%Binder,REQ,PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
  #ENDBUTTON
#ENDBUTTON
#BUTTON('Page breaks'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
  #BOXED('Style of Report'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #PROMPT('Is this an invoice style of Report?',CHECK),%InvoiceStyle,AT(10),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #ENABLE(%InvoiceStyle = %TRUE)
      #DISPLAY('Enter the field that determines to start printing a new'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
      #DISPLAY('invoice'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
      #PROMPT('Field to watch: ', FIELD),%BreakField,REQ,PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
      #PROMPT('Reset Page Numbers after each invoice?',CHECK),%ResetPageNumbers,AT(10),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #ENDENABLE
  #ENDBOXED
  #DISPLAY('Enter any other fields which will force a page break'),AT(,,180,20),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
  #BUTTON('Page Break Fields'),MULTI(%LLOtherBreakFields,%LLOtherBreakField),INLINE,AT(,,,60),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #PROMPT('Field:',FIELD),%LLOtherBreakField,REQ,PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #DISPLAY('You may also add an optional condition for this page break to happen.  This can be any valid Clarion Statement.  e.g.'),AT(,,170,30),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #DISPLAY('BRW1::View:Browse{{PROP:Order}} = ''CHI:House'''),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #PROMPT('Optional Condition',@S255),%LLPageBreakCondition,PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
  #ENDBUTTON
  #DISPLAY('Enter any expressions which will will force a page break when expression returns true.'),AT(,,180,20),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
  #BUTTON('Expressions'),MULTI(%LLBreakExpressions,%LLBreakExpression),INLINE,AT(,,,60),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #PROMPT('Expression:',@S255),%LLBreakExpression,REQ,PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
  #ENDBUTTON
  #BUTTON('Setting page breaks in embed code'),AT(,,170),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #DISPLAY('There is an embed called:-'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #DISPLAY('"Set up custom page break"'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #DISPLAY('Where you may enter code to set the local variable LLPageBreak = TRUE.  Setting this variable to TRUE will cause List && Label to preform an immediate page break at that point. It will automatically be set back to false for the next line of data to be sent to List && Label'),AT(,,170,60),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
  #ENDBUTTON
#ENDBUTTON
#BUTTON('Suppress Children'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
  #BOXED(''),PROP(PROP:Bevel,1)
    #DISPLAY('If you wish this report to be able to output to Labels and Cards as well as Lists WITHOUT child records causing multiple occurances of the Label or Card, then switch this checkbox on, and only the first record for a Parent/Chid relationship will be printed when a Label or Card is selected'),AT(,,170,60),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #PROMPT('Suppress Child Records',CHECK),%SupressChild,AT(10),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #ENABLE(%SupressChild=%True)
      #DISPLAY('You must now select the field which will uniquely identify the parent record.  Labels and Cards will only be printed when this field changes'),AT(,,170,40),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
      #PROMPT('Unique Parent Identifier',FIELD),%LLParentID,REQ,PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #ENDENABLE
  #ENDBOXED
#ENDBUTTON
#BUTTON('Printer Selection'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
  #BOXED(''),PROP(PROP:Bevel,1)
    #DISPLAY('The printer definition file can be re-created every time a report is run.  This will ensure that the correct printer driver is used for each report.  It is advisable to have this option switched on to ensure compatibilities between different printer drivers.  This will be ignored if a variable is entered below and has a value assigned to it'),AT(,,170,60),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #PROMPT('Create printer file for every report',CHECK),%RecreateDriver,DEFAULT(%True),AT(10),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
  #ENDBOXED
  #BOXED(''),PROP(PROP:Bevel,1)
    #DISPLAY('You may wish to select a different printer to print to, which may require different drivers.  You may select a variable which will hold the name of this printer, which will then automatically update the List && Label printer file with the correct driver for that printer.  Populating this variable with a valid printer name will also send the output to that printer if the user opts to output to printer'),AT(,,170,65),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #PROMPT('Variable to hold printer name',FIELD),%LLPrinterName,PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
  #ENDBOXED
#ENDBUTTON
#BUTTON('Progress Options'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
  #PROMPT('Type of Progress: ',DROP('Clarion Progress Bar|Abort, bar meter & text|Abort, bridge meter & text|Abort & text|Bar meter & text|Bridge meter & text|Text Only|No Progress Window')),%ProgressType,DEFAULT(%GloDefaultProgressType),AT(75,,110),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
  #BOXED(''),PROP(PROP:Bevel,1)
    #ENABLE(%ProgressType <> 'Clarion Progress Bar' AND %ProgressType <> 'No Progress Window'),CLEAR
      #DISPLAY('You may display static text in the progress box or'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
      #DISPLAY('change the text as each record is printed'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
      #DISPLAY('To do this simply enter a valid Clarion expression'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
      #PROMPT('Static or Dynamic Text',OPTION),%ProgressTextType,PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
      #PROMPT('Static Text',RADIO),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
      #PROMPT('Dynamic Text',RADIO),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
      #ENABLE(%ProgressTextType = 'Static Text')
        #PROMPT('Static Text: ',@s255),%PrintText ,AT(75,,95),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
        #BUTTON('...'),AT(172,,10,10),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
          #PROMPT('Static text ',TEXT),%PrintText,PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
        #ENDBUTTON
      #ENDENABLE
      #ENABLE(%ProgressTextType = 'Dynamic Text')
        #PROMPT('Dynamic Expression',@s255),%DynamicText,AT(75,,95),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
        #BUTTON('...'),AT(172,,10,10),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
          #PROMPT('Dynamic Expression',TEXT),%DynamicText,PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
        #ENDBUTTON
      #ENDENABLE
    #ENDENABLE
  #ENDBOXED
  #BOXED(''),PROP(PROP:Bevel,1)
    #DISPLAY('In order to give an accurate progress display , the template needs to know in advance how many records there are to print.  This can be done in two ways.  One way is to let the templates run through the list beforehand which will be 100% accurate, but can slow down the process, or supply your own figure.  Leave as 0 to let to templates calcuate the number'),AT(,,170,60),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #DISPLAY('Remember to preceed a variable with !'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #PROMPT('Approx number of records',EXPR),%ApproxToPrint,DEFAULT(0),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
  #ENDBOXED
#ENDBUTTON
#BUTTON('Error Message'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
  #PROMPT('Process Errors from List && Label on open ',CHECK),%OpenError,DEFAULT(%True),AT(10),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
  #ENABLE(%OpenError = %True),CLEAR
    #PROMPT('Processing the List && Label error',OPTION),%ProcessError,DEFAULT('Display message'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #PROMPT('Call a procedure ',RADIO),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #PROMPT('Display message',RADIO),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #ENABLE(%ProcessError = 'Call a procedure'),CLEAR
      #PROMPT('Procedure to call:',PROCEDURE),%ErrorProc,REQ,PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
      #PROMPT('Parameters:',@S80),%ErrorParams,PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #ENDENABLE
    #DISPLAY('')
    #ENABLE(%ProcessError = 'Display message')
      #DISPLAY('Please remember to enclose text in quotes'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
      #PROMPT('Text for Error: ',@S255),%ErrorText,REQ,Default('''Error when opening report was '' & LLResult'),AT(65,,115),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
      #BUTTON('...'),AT(182,,10,10),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
        #PROMPT('Text for Error:',TEXT),%ErrorText,PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
      #ENDBUTTON
    #ENDENABLE
  #ENDENABLE
#ENDBUTTON
#BUTTON('Options'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
  #BOXED('General')
    #PROMPT('Show page breaks ',CHECK),%SupportTextPageBreak,DEFAULT(%DefSupportTextPageBreak),AT(10),PROP(PROP:Tip,'The page break checkbox of the text object is shown and can be checked by the user.'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #PROMPT('Case Sensitive Variables ',CHECK),%CaseSensitiveVars,DEFAULT(%DefCaseSensitiveVars),AT(10),PROP(PROP:Tip,'Variables and field names are case sensitive.'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #PROMPT('Multiple Table lines ',CHECK),%MultiTableLines,DEFAULT(%DefMultiTableLines),AT(10),PROP(PROP:Tip,'Tables can have multiple line defs that are activated by separate conditions.<10>  Used to create sub-reports by switching between different table lines in this application.'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #PROMPT('Sort Variables ',CHECK),%SortVars,DEFAULT(%DefSortVars),AT(10),PROP(PROP:Tip,'If true, variables are sorted alphabetically.'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #PROMPT('Convert CF/LF to LF ',CHECK),%ConvertCRLF,DEFAULT(%DefConvertCRLF),AT(10),PROP(PROP:Tip,'Translates CRLF combinations in variables to LF preventing duplicate line breaks.'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #PROMPT('List && Label Help Available',CHECK),%LLHelpAvailable,DEFAULT(%DefLLHelpAvailable),AT(10),PROP(PROP:Tip,'Display help buttons when true.'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #PROMPT('No Parameter Checking ',CHECK),%NoParamCheck,DEFAULT(%DefNoParamCheck),AT(10),PROP(PROP:Tip,'List && Label will not check paramets passed to its DLL, which results is faster processing speed.'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #PROMPT('No Table Checking ',CHECK),%NoTableCheck,DEFAULT(%DefNoTableCheck),AT(10),PROP(PROP:Tip,'For list projects, no check is made to ensure at least one table is present.'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #PROMPT('Space Optimization ',CHECK),%SpaceOptimize,DEFAULT(%DefSpaceOptimize),AT(10),PROP(PROP:Tip,'Uses the space optimization feature for new paragrpahs in text objects and new fields.'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #PROMPT('Delay Table Header ',CHECK),%DelayTableHead,DEFAULT(%DefDelayTableHead),AT(10),PROP(PROP:Tip,'Prints the table header when calling Print or first printing a field.'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #PROMPT('Supervisor Option ',CHECK),%Supervisor,DEFAULT(%DefSupervisor),AT(10),PROP(PROP:Tip,'If true all menu options are allowed and locked objects are no LONGer locked.'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #BOXED('Debug'),PROP(PROP:Bevel,1)
      #PROMPT('List && Label Debug ',CHECK),%Debugmode,AT(10),PROP(PROP:Tip,'Sends internal L&&L output to DEBWIN2.EXE'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #ENDBOXED
  #ENDBOXED
#ENDBUTTON
#BUTTON('Preview Options'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
  #PROMPT('Do not Use List && Label Previewer',CHECK),%NotUseLLPreviewer,AT(10),DEFAULT(%DefaultNotUseLLPreviewer),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
  #ENABLE(%NotUseLLPreviewer = %True)
    #PROMPT('Previewer Procedure: ',PROCEDURE),%LLPreviewProcedure,DEFAULT(%DefaultLLPreviewProcedure),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400),PROP(PROP:Tip,'Enter or select the procedure for previewing reports')
  #ENDENABLE
  #ENABLE(%NotUseLLPreviewer = %False)
    #BOXED('Preview Options')
      #PROMPT('Remove "Send To" Button',CHECK),%PreviewSendTo,DEFAULT(%DefPreviewSendTo),AT(10),PROP(PROP:Tip,'When checked, removes this button from L&&L dialogs.'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
      #PROMPT('Remove "Save As" Button ',CHECK),%PreviewSaveAs,DEFAULT(%DefPreviewSaveAs),AT(10),PROP(PROP:Tip,'When checked, removes this button from L&&L dialogs.'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #ENDBOXED
  #ENDENABLE
 #ENDBUTTON
#BUTTON('Export Options'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
  #BOXED('PDF')
    #DISPLAY('By default, RTF text is stored in PDF files as pictures which will create a large file.  You may export RTF text as unformatted text which will reduce the size of the file.'),AT(,,170,35),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #PROMPT('Export RTF as unformated Text',CHECK),%RTFPlainInPDF,AT(10),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
  #ENDBOXED
  #BOXED('HTML')
    #DISPLAY('By Default, every printed page will be exported into a single HTML file.  You may override this so that each page is generated into its own file.  Each file (except the first file) will be enumerated'),AT(,,170,35),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #PROMPT('Generated individual files for each page',CHECK),%HTMLOneFilePerPage,AT(10),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
  #ENDBOXED
  #BOXED(''),PROP(PROP:Bevel,1)
    #DISPLAY('An embedded Queue located in Local Data which holds the names of all generated files by the exported report.  These files are NOT deleted after the report completes.'),AT(,,170,35),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #DISPLAY('Delete files from the folder after emailing.  You may select a variable which, when set to true automatically deletes these files.  If no variable is selected, the files remain.'),AT(,,170,48),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #PROMPT('Variable to delete files',FIELD),%LLAutoDeleteExportedFiles,PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
  #ENDBOXED
#ENDBUTTON
#BUTTON('Faxing'),Where(%LLVersion = 'Version 12' OR %LLVersion = 'Version 13' OR %LLVersion = 'Version 14' OR %LLVersion = 'Version 15'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
  #DISPLAY('Please note the end user machine must support faxing. Only one fax recipient can be specified per report'),AT(,,180,30),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
  #PROMPT('Enable Fax Support',CHECK),%AllowFaxing,AT(10),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
  #ENABLE(%AllowFaxing=%True)
    #DISPLAY('Select Variables (CSTRING) which has the following information'),AT(,,180,20),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #PROMPT('Recipient N&ame (Opt)',FIELD),%FaxRecipName,PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #PROMPT('Recipient N&umber',FIELD),%FaxRecipNumber,REQ,PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #PROMPT('&Sender Name (Opt)',FIELD),%FaxSenderName,PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #PROMPT('Sender &Company (Opt)',FIELD),%FaxSenderCompany,PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #PROMPT('Sender &Department (Opt)',FIELD),%FaxSenderDept,PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #PROMPT('Sender &Billing Code (Opt)',FIELD),%FaxSenderBillingCode,PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
  #ENDENABLE
#ENDBUTTON
#BUTTON('EMail'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
  #DISPLAY('Please note that email is only available for exported file formats'),AT(,,180,20),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
  #DISPLAY('To email an exported report, set a built in variable to true then populate a built in queue with the details of recipients'),AT(,,180,30),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
  #DISPLAY('Provided that the variable LLEMailReport is set to true and the Queue LLEMailQueue has one or more records, then the exported reports will be sent to the recipients in the queue'),at(,,180,35),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
  #DISPLAY('The structure of the Queue is:-'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
  #DISPLAY('   LLEMailQueue      QUEUE,PRE(LLQ)'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
  #DISPLAY('   LLMailTo            CSTRING(225)'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
  #DISPLAY('   LLMailCC            CSTRING(255)'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
  #DISPLAY('   LLMailBCC           CSTRING(255)'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
  #DISPLAY('                     END'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
  #DISPLAY('')
  #DISPLAY('Two extra fields can also be populated.  These are:-'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
  #DISPLAY('LLSubject           !The Subject line of the email'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
  #DISPLAY('LLBody               !The Body/Text of the email'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
  #DISPLAY('')
  #BUTTON('Program Example'),AT(50),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #DISPLAY('')
    #DISPLAY('At the start of your procedure:-'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #DISPLAY('')
    #DISPLAY('LLEMailReport = True        !Set flag to send email'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #DISPLAY('FREE(LLEMailQueue)          !Remove any previous recipients'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #DISPLAY('LLQ:LLMailTo = ''support@radfusion.com'''),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #DISPLAY('LLQ:LLMailCC = ''me@home.com'''),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #DISPLAY('LLQ:LLMailBCC = '''''),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #DISPLAY('ADD(LLEMailQueue)'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #DISPLAY('LLSubject = ''List and Label test'''),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #DISPLAY('LLBody = ''This is List and Label export test'''),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #DISPLAY('')
  #ENDBUTTON
#ENDBUTTON
#!==================================================================================================
#GROUP(%LLDefineVars)

LLDefineVariables         ROUTINE
#DECLARE(%CallRoutine)
#EMBED(%LLStartDefineVar,'Begin List and Label Define Variables Routine'),LEGACY
#FOR(%RepFiles)
#!  #IF(%RepFileName = 'LL_RepArea' and %LLSendRepArea=%False)
#!    #CYCLE
#!  #ENDIF
#!  #IF(%RepFileName = 'LL_RepLay' and %LLSendReplay=%False)
#!    #CYCLE
#!  #ENDIF
  #SET(%CallRoutine,'Send' & %RepFileName & 'ToLL')
  DO %CallRoutine
#ENDFOR
  #EMBED(%LLEndDefineVar,'End List and Label Define Variables Routine'),LEGACY
#!==================================================================================================
#GROUP(%PopulateEmail)
  #EMBED(%LLBeforePopulateEmail,'LL Before populatinging Email from queue'),LEGACY
#!  IF RECORDS(LLEMailQueue) 
#!    CLEAR(LLFullMailTo)
#!    CLEAR(LLFullMailCC)
#!    CLEAR(LLFullMailBCC)
#!    LOOP LLMailToRec# = 1 TO RECORDS(LLEMailQueue)
#!     GET(LLEMailQueue,LLMailToRec#)
#!     IF LEN(LLFullMailTo) > 0 
#!       LLFullMailTo = LLFullMailTo & ';'
#!     END
#!     LLFullMailTo = LLFullMailTo & LLQ:LLMailTo
#!     IF LEN(LLFullMailCC) > 0 
#!       LLFullMailCC = LLFullMailCC & ';'
#!     END
#!     LLFullMailCC = LLFullMailCC & LLQ:LLMailCC
#!     IF LEN(LLFullMailBCC) > 0 
#!       LLFullMailBCC = LLFullMailBCC & ';'
#!     END
#!     LLFullMailBCC = LLFullMailBCC & LLQ:LLMailBCC
#!    END
#!  END
  #EMBED(%LLAfterPopulateEmail,'LL After populatinging Email from queue'),LEGACY
#!==================================================================================================
#GROUP(%PrintOutToLL)

PrintOutToLL              ROUTINE
  DATA
LLPages     LONG
Idx         LONG

  CODE
#IF(%SupressChild=%True)
  IF LLReportType <> 2                             #<!This is a Card or Label
    IF LLSavedParent = %LLParentID 
      EXIT
    END
    LLSavedParent = %LLParentID
  END
#ENDIF
  DO LLDefineVariables
  DO LLDefineManualVariables
  #EMBED(%LLBeforePrint,'Before Sending Print to List & Label'),LEGACY
  IF RFIPages = 0 
    RFIPages = 1
  END
  CASE LLReportType
  OF LL_Project_List
    LLPageBreak = False
#IF(%InvoiceStyle=%TRUE)
    IF LLInvoiceBreak <> %BreakField 
      LLPageBreak = True
    END
    LLInvoiceBreak = %BreakField
#ENDIF
#FOR(%LLOtherBreakFields)
    IF %LLOtherBreakField <> %LLDeclareLocBreakField AND (CLIP(%LLDeclareLocBreakField) <> '' OR %LLDeclareLocBreakField <> 0) 
  #IF(%LLPageBreakCondition)
      IF %LLPageBreakCondition 
    #INDENT(2)
  #ENDIF
      LLPageBreak = True
      LLResult = LL.PrintResetProjectState(LLhJob)
  #IF(%LLPageBreakCondition)
    #INDENT(-2)
    END
  #ENDIF
    END
    %LLDeclareLocBreakField = %LLOtherBreakField
#ENDFOR
    #EMBED(%LLCustombreak,'Set up custom page break'),LEGACY
    IF LLPageBreak = True 
      #EMBED(%LLBeforebreak,'Before Sending page break on break field'),LEGACY
      UnlockThread()
      LLResult = LL.PrintReport(LLhJob)
      LockThread()
    END
    #EMBED(%LLListBeforeLoop,'List & Label - Printing List - Before print Loop'),LEGACY
    LOOP LLPages = 1 TO RFIPages
      LOOP
        IF LL.PrintFields(LLhJob) <> LL_WRN_REPEAT_DATA 
          BREAK
        ELSE
          #EMBED(%LLListRepeatData,'List & Label - Printing List - Data overflows page overflow'),LEGACY
        END
        #EMBED(%LLListBeforePrintPage,'List & Label - Printing List - Before Printing Page'),LEGACY
        UnlockThread()
        LLResult = LL.PrintReport(LLhJob)
        LockThread()
      END
    END
    OF LL_Project_Card
      LOOP LLPages = 1 TO RFIPages
        LLPageOverflow = 0
        LOOP
        #INSERT(%Flags)
          UnlockThread()
          LLResult = LL.PrintReport(LLhJob)
          LockThread()
          IF LLResult <> LL_WRN_REPEAT_DATA 
            BREAK
          ELSE
            LLPageOverflow += 1
            #EMBED(%LLCardRepeatData,'List & Label - Printing Card - Data overflows page'),LEGACY
          END
        END
      END
    OF LL_Project_Label
      #EMBED(%LLSetUpQtyLabels,'Before sending List and Label Report Parameters to Label - Allocate Qty to LLQtyLabels'),LEGACY
      LOOP Idx = 1 TO LLQtyLabels
        #EMBED(%LLLabelLoop,'In List & Label Label Loop'),LEGACY
        UnlockThread()
        LLResult = LL.PrintReport(LLhJob)
        LockThread()
      END
    END
#EMBED(%LLAfterPrint,'After Sending Print to List & Label'),LEGACY
    LLPrinted += 1
#!==================================================================================================
#GROUP(%PopulateExportedFiles)
  %ThisObjectName.LLResult = LL.GetOptionString(%ThisObjectName.Job,LL_OPTIONSTR_EXPORTFILELIST,%ThisObjectName.LLFilesCreated,10240)
  FREE(LLExportFilesQ)
  LLLastSep = 1
  LLNextSep = 0
  LOOP
    LLNextSep = InString(';',%ThisObjectName.LLFilesCreated,1,LLLastSep)
    IF LLNextSep = 0 
      LLNextSep = LEN(%ThisObjectName.LLFilesCreated) + 1
    END
    LLExpf:Filename = SUB(%ThisObjectName.LLFilesCreated,LLLastSep,LLNextSep - LLLastSep)
    LLLastSep = LLNextSep + 1
    #IF(%LLAutoDeleteExportedFiles<>'')
    IF %LLAutoDeleteExportedFiles = True AND LLEMailReport = True 
      REMOVE(LLExpf:Filename)
    ELSE
      ADD(LLExportFilesQ)
    END
    #ELSE
    ADD(LLExportFilesQ)
    #ENDIF
    IF LLNextSep = LEN(%ThisObjectName.LLFilesCreated) + 1
      BREAK
    END
  END
  #EMBED(%LLAfterPopLLExportFilesQ,'After populating List and Label LLExportFilesQ'),LEGACY
#!==================================================================================================
#GROUP(%FindQtyToPrint)
  SET(%PrintView)
  LLTotalRecordsInView = RECORDS(%PrintView)
  IF LLTotalRecordsInView = -1                 #<!Cannot tell because a key is in use
    LLTotalRecordsInView = 0                       #<!So have to find out manually
    LOOP                                            
      NEXT(%PrintView)
      IF ERROR() 
        BREAK
      END
#IF(%ActiveTemplateParentInstance>0)
      IF %ManagerName.ValidateRecord() = Record:Filtered 
        CYCLE
      END
#ENDIF
      #EMBED(%LLCountViewContent,'L&L In Loop counting records in View'),LEGACY
      LLTotalRecordsInView += 1
    END
  END
!==================================================================
#GROUP(%RADFusionLogo)
#BOXED   (''),AT(5,0,184,93),PROP(PROP:Bevel,-1)
  #IMAGE('RADFusionLight800.jpg'), AT(5, 1, 183, 92)
#ENDBOXED
!==================================================================
#GROUP(%DisplayColor,* %ColorParam)
#DECLARE(%ReturnColor)
#SET(%ReturnColor,%ColorParam)
#RETURN(%ReturnColor)
!==================================================================
#GROUP(%GlobalEmbedVirtuals, %TreeText, %DataText, %CodeText)
#EMBED(%ListLabelDataSection,'ListLabel Method Data Section'), %ApplicationTemplateInstance,%pClassMethod,%pClassMethodPrototype,TREE(%TreeText & %DataText)
  #?CODE
  #EMBED(%ListLabelCodeSection,'ListLabel Method Code Section'), %ApplicationTemplateInstance,%pClassMethod,%pClassMethodPrototype,TREE(%TreeText & %CodeText)
!==================================================================
#GROUP(%LLShipList)
  #!***************************************** Version 15 Ship List ****************
  #IF(%LLVersion = 'Version 15')
     Combit List & Label files:-
     ---------------------------
    #IF(%LLUseUnicode=%False)
     CMLL15.DLL
     CMLL15XL.DLL
     CMLS15.DLL
     CMBR15.DLL
     CMPR15.DLL
     CMUT15.DLL
     CMCT15.DLL
     CMDW15.DLL
     CMMX01.DLL
    #ELSE
     CULL15.DLL
     CMLL15XL.DLL
     CULS15.DLL
     CUBR15.DLL
     CUPR15.DLL
     CUUT15.DLL
     CUCT15.DLL
     CUDW15.DLL
     CMLS15.DLL
     CMMX01.DLL
     CMPR15.DLL
     CMUT15.DLL
     CMCT15.DLL
     CMBR15.DLL
     CMDW15.DLL
    #ENDIF
     CMLL15EX.LLX     Export Modules (HTML, PDF, RTF, XML, MHTML,...)
     CMLL15OB.LLX     Charting-Object
     CMLL15OC.LLX     OLE-Object
     CMLL15HT.LLX     HTML-Object
     CMLL15PW.LLX     Project Wizard
     CMLL15BC.LLX     PDF 417 / Maxicode Barcode - (Professional Version only)
     CMMX01.CPL       combit mail settings control panel applet
     CMLL15SX.DLL     shell extension for preview files
   #CASE(%Language)
   #OF('English')
     #IF(%LLUseUnicode=%True)
     CULL1501.LNG       !English Language file
     #ELSE
     CMLL1501.LNG       !English Language file
     CMMX0101.LNG
     #ENDIF
     CMLL1501.INF (contains label formats; has to be in the same path of CMLL15.DLL)
     CMLL1501.CHM (Designer help; has to be in the same path of CMLL15.DLL)
   #OF('German')
     #IF(%LLUseUnicode=%True)
     CULL1500.LNG       !German Language file
     #ELSE
     CMLL1500.LNG       !German Language file
     #ENDIF
     CMLL1500.INF (contains label formats; has to be in the same path of CMLL15.DLL)
     CMLL1500.CHM (Designer help; has to be in the same path of CMLL15.DLL)
   #OF('Greek')
     #IF(%LLUseUnicode=%True)
     CULL1519.LNG       !Greek Language file
     CMLS1519.LNG
     #ELSE
     CMLL1519.LNG       !Greek Language file
     CMLS1519.LNG
     #ENDIF
     CMLL1519.INF (contains label formats; has to be in the same path of CMLL15.DLL)
     CMLL1519.CHM (Designer help; has to be in the same path of CMLL15.DLL)
   #OF('French')
     #IF(%LLUseUnicode=%True)
     CULL1518.LNG       !French Language file
     CMLS1518.LNG
     #ELSE
     CMLL1518.LNG       !French Language file
     CMLS1518.LNG
     #ENDIF
     CMLL1518.INF (contains label formats; has to be in the same path of CMLL15.DLL)
     CMLL1518.CHM (Designer help; has to be in the same path of CMLL15.DLL)
   #OF('Catalan')
     #IF(%LLUseUnicode=%True)
     CULL1508.LNG       !Catalan Language file
     CMLS1508.LNG
     #ELSE
     CMLL1508.LNG       !Catalan Language file
     CMLS1508.LNG
     #ENDIF
     CMLL1508.INF (contains label formats; has to be in the same path of CMLL15.DLL)
     CMLL1508.CHM (Designer help; has to be in the same path of CMLL15.DLL)
   #OF('Danish')
     #IF(%LLUseUnicode=%True)
     CULL1515.LNG       !Danish Language file
     CMLS1515.LNG
     #ELSE
     CMLL1515.LNG       !Danish Language file
     CMLS1515.LNG
     #ENDIF
     CMLL1515.INF (contains label formats; has to be in the same path of CMLL15.DLL)
     CMLL1515.CHM (Designer help; has to be in the same path of CMLL15.DLL)
   #OF('Dutch')
     #IF(%LLUseUnicode=%True)
     CULL1515.LNG       !Dutch Language file
     CMLS1515.LNG
     #ELSE
     CMLL1515.LNG       !Dutch Language file
     CMLS1515.LNG
     #ENDIF
     CMLL1515.INF (contains label formats; has to be in the same path of CMLL15.DLL)
     CMLL1515.CHM (Designer help; has to be in the same path of CMLL15.DLL)
   #OF('Hungarian')
     #IF(%LLUseUnicode=%True)
     CULL1521.LNG       !Hungarian Language file
     CMLS1521.LNG
     #ELSE
     CMLL1521.LNG       !Hungarian Language file
     CMLS1521.LNG
     #ENDIF
     CMLL1521.INF (contains label formats; has to be in the same path of CMLL15.DLL)
     CMLL1521.CHM (Designer help; has to be in the same path of CMLL15.DLL)
   #OF('Italian')
     #IF(%LLUseUnicode=%True)
     CULL1524.LNG       !Italian Language file
     CMLS1524.LNG
     #ELSE
     CMLL1524.LNG       !Italian Language file
     CMLS1524.LNG
     #ENDIF
     CMLL1524.INF (contains label formats; has to be in the same path of CMLL15.DLL)
     CMLL1524.CHM (Designer help; has to be in the same path of CMLL15.DLL)
   #OF('Norwegian')
     #IF(%LLUseUnicode=%True)
     CULL1529.LNG       !Norwegian Language file
     CMLS1529.LNG
     #ELSE
     CMLL1529.LNG       !Norwegian Language file
     CMLS1529.LNG
     #ENDIF
     CMLL1529.INF (contains label formats; has to be in the same path of CMLL15.DLL)
     CMLL1529.CHM (Designer help; has to be in the same path of CMLL15.DLL)
   #OF('Portuguese')
     #IF(%LLUseUnicode=%True)
     CULL1531.LNG       !Portugese Language file
     CMLS1531.LNG
     #ELSE
     CMLL1531.LNG       !Portugese Language file
     CMLS1531.LNG
     #ENDIF
     CMLL1531.INF (contains label formats; has to be in the same path of CMLL15.DLL)
     CMLL1531.CHM (Designer help; has to be in the same path of CMLL15.DLL)
   #OF('Russian')
     #IF(%LLUseUnicode=%True)
     CULL1533.LNG       !Russian Language file
     CMLS1533.LNG
     #ELSE
     CMLL1533.LNG       !Russian Language file
     CMLS1533.LNG
     #ENDIF
     CMLL1533.INF (contains label formats; has to be in the same path of CMLL15.DLL)
     CMLL1533.CHM (Designer help; has to be in the same path of CMLL15.DLL)
   #OF('Spanish')
     #IF(%LLUseUnicode=%True)
     CULL1537.LNG       !Spanish Language file
     CMLS1537.LNG
     #ELSE
     CMLL1537.LNG       !Spanish Language file
     CMLS1537.LNG
     #ENDIF
     CMLL1537.INF (contains label formats; has to be in the same path of CMLL15.DLL)
     CMLL1537.CHM (Designer help; has to be in the same path of CMLL15.DLL)
   #OF('Swedish')
     #IF(%LLUseUnicode=%True)
     CULL1538.LNG       !Swedish Language file
     CMLS1538.LNG
     #ELSE
     CMLL1538.LNG       !Swedish Language file
     CMLS1538.LNG
     #ENDIF
     CMLL1538.INF (contains label formats; has to be in the same path of CMLL15.DLL)
     CMLL1538.CHM (Designer help; has to be in the same path of CMLL15.DLL)
   #ENDCASE

   If you are using the procedure RADLLPreview then you will also need:-
   CMLL10O.OCX  This must be registered on your end user's system
  #ENDIF
  #!***************************************** Version 14 Ship List ****************
  #IF(%LLVersion = 'Version 14')
     Combit List & Label files:-
     ---------------------------
    #IF(%LLUseUnicode=%False)
     CMLL14.DLL
     CMLL14XL.DLL
     CMLS14.DLL
     CMBR14.DLL
     CMPR14.DLL
     CMUT14.DLL
     CMCT14.DLL
     CMDW14.DLL
     CMMX01.DLL
    #ELSE
     CULL14.DLL
     CMLL14XL.DLL
     CULS14.DLL
     CUBR14.DLL
     CUPR14.DLL
     CUUT14.DLL
     CUCT14.DLL
     CUDW14.DLL
     CMLS14.DLL
     CMMX01.DLL
     CMPR14.DLL
     CMUT14.DLL
     CMCT14.DLL
     CMBR14.DLL
     CMDW14.DLL
    #ENDIF
     CMLL14EX.LLX     Export Modules (HTML, PDF, RTF, XML, MHTML,...)
     CMLL14OB.LLX     Charting-Object
     CMLL14OC.LLX     OLE-Object
     CMLL14HT.LLX     HTML-Object
     CMLL14PW.LLX     Project Wizard
     CMLL14BC.LLX     PDF 417 / Maxicode Barcode - (Professional Version only)
     CMMX01.CPL       combit mail settings control panel applet
     CMLL14SX.DLL     shell extension for preview files
   #CASE(%Language)
   #OF('English')
     #IF(%LLUseUnicode=%True)
     CULL1401.LNG       !English Language file
     #ELSE
     CMLL1401.LNG       !English Language file
     CMMX0101.LNG
     #ENDIF
     CMLL1401.INF (contains label formats; has to be in the same path of CMLL14.DLL)
     CMLL1401.CHM (Designer help; has to be in the same path of CMLL14.DLL)
   #OF('German')
     #IF(%LLUseUnicode=%True)
     CULL1400.LNG       !German Language file
     #ELSE
     CMLL1400.LNG       !German Language file
     #ENDIF
     CMLL1400.INF (contains label formats; has to be in the same path of CMLL14.DLL)
     CMLL1400.CHM (Designer help; has to be in the same path of CMLL14.DLL)
   #OF('Greek')
     #IF(%LLUseUnicode=%True)
     CULL1419.LNG       !Greek Language file
     CMLS1419.LNG
     #ELSE
     CMLL1419.LNG       !Greek Language file
     CMLS1419.LNG
     #ENDIF
     CMLL1419.INF (contains label formats; has to be in the same path of CMLL14.DLL)
     CMLL1419.CHM (Designer help; has to be in the same path of CMLL14.DLL)
   #OF('French')
     #IF(%LLUseUnicode=%True)
     CULL1418.LNG       !French Language file
     CMLS1418.LNG
     #ELSE
     CMLL1418.LNG       !French Language file
     CMLS1418.LNG
     #ENDIF
     CMLL1418.INF (contains label formats; has to be in the same path of CMLL14.DLL)
     CMLL1418.CHM (Designer help; has to be in the same path of CMLL14.DLL)
   #OF('Catalan')
     #IF(%LLUseUnicode=%True)
     CULL1408.LNG       !Catalan Language file
     CMLS1408.LNG
     #ELSE
     CMLL1408.LNG       !Catalan Language file
     CMLS1408.LNG
     #ENDIF
     CMLL1408.INF (contains label formats; has to be in the same path of CMLL14.DLL)
     CMLL1408.CHM (Designer help; has to be in the same path of CMLL14.DLL)
   #OF('Danish')
     #IF(%LLUseUnicode=%True)
     CULL1414.LNG       !Danish Language file
     CMLS1414.LNG
     #ELSE
     CMLL1414.LNG       !Danish Language file
     CMLS1414.LNG
     #ENDIF
     CMLL1414.INF (contains label formats; has to be in the same path of CMLL14.DLL)
     CMLL1414.CHM (Designer help; has to be in the same path of CMLL14.DLL)
   #OF('Dutch')
     #IF(%LLUseUnicode=%True)
     CULL1414.LNG       !Dutch Language file
     CMLS1414.LNG
     #ELSE
     CMLL1414.LNG       !Dutch Language file
     CMLS1414.LNG
     #ENDIF
     CMLL1414.INF (contains label formats; has to be in the same path of CMLL14.DLL)
     CMLL1414.CHM (Designer help; has to be in the same path of CMLL14.DLL)
   #OF('Hungarian')
     #IF(%LLUseUnicode=%True)
     CULL1421.LNG       !Hungarian Language file
     CMLS1421.LNG
     #ELSE
     CMLL1421.LNG       !Hungarian Language file
     CMLS1421.LNG
     #ENDIF
     CMLL1421.INF (contains label formats; has to be in the same path of CMLL14.DLL)
     CMLL1421.CHM (Designer help; has to be in the same path of CMLL14.DLL)
   #OF('Italian')
     #IF(%LLUseUnicode=%True)
     CULL1424.LNG       !Italian Language file
     CMLS1424.LNG
     #ELSE
     CMLL1424.LNG       !Italian Language file
     CMLS1424.LNG
     #ENDIF
     CMLL1424.INF (contains label formats; has to be in the same path of CMLL14.DLL)
     CMLL1424.CHM (Designer help; has to be in the same path of CMLL14.DLL)
   #OF('Norwegian')
     #IF(%LLUseUnicode=%True)
     CULL1429.LNG       !Norwegian Language file
     CMLS1429.LNG
     #ELSE
     CMLL1429.LNG       !Norwegian Language file
     CMLS1429.LNG
     #ENDIF
     CMLL1429.INF (contains label formats; has to be in the same path of CMLL14.DLL)
     CMLL1429.CHM (Designer help; has to be in the same path of CMLL14.DLL)
   #OF('Portuguese')
     #IF(%LLUseUnicode=%True)
     CULL1431.LNG       !Portugese Language file
     CMLS1431.LNG
     #ELSE
     CMLL1431.LNG       !Portugese Language file
     CMLS1431.LNG
     #ENDIF
     CMLL1431.INF (contains label formats; has to be in the same path of CMLL14.DLL)
     CMLL1431.CHM (Designer help; has to be in the same path of CMLL14.DLL)
   #OF('Russian')
     #IF(%LLUseUnicode=%True)
     CULL1433.LNG       !Russian Language file
     CMLS1433.LNG
     #ELSE
     CMLL1433.LNG       !Russian Language file
     CMLS1433.LNG
     #ENDIF
     CMLL1433.INF (contains label formats; has to be in the same path of CMLL14.DLL)
     CMLL1433.CHM (Designer help; has to be in the same path of CMLL14.DLL)
   #OF('Spanish')
     #IF(%LLUseUnicode=%True)
     CULL1437.LNG       !Spanish Language file
     CMLS1437.LNG
     #ELSE
     CMLL1437.LNG       !Spanish Language file
     CMLS1437.LNG
     #ENDIF
     CMLL1437.INF (contains label formats; has to be in the same path of CMLL14.DLL)
     CMLL1437.CHM (Designer help; has to be in the same path of CMLL14.DLL)
   #OF('Swedish')
     #IF(%LLUseUnicode=%True)
     CULL1438.LNG       !Swedish Language file
     CMLS1438.LNG
     #ELSE
     CMLL1438.LNG       !Swedish Language file
     CMLS1438.LNG
     #ENDIF
     CMLL1438.INF (contains label formats; has to be in the same path of CMLL14.DLL)
     CMLL1438.CHM (Designer help; has to be in the same path of CMLL14.DLL)
   #ENDCASE

   If you are using the procedure RADLLPreview then you will also need:-
   CMLL10O.OCX  This must be registered on your end user's system
  #ENDIF
  #!***************************************** Version 13 Ship List ****************
  #IF(%LLVersion = 'Version 13')
     Combit List & Label files:-
     ---------------------------
    #IF(%LLUseUnicode=%False)
     CMLL13.DLL
     CMLL13XL.DLL
     CMLS13.DLL
     CMBR13.DLL
     CMPR13.DLL
     CMUT13.DLL
     CMCT13.DLL
     CMDW13.DLL
     CMMX01.DLL
    #ELSE
     CULL13.DLL
     CMLL13XL.DLL
     CULS13.DLL
     CUBR13.DLL
     CUPR13.DLL
     CUUT13.DLL
     CUCT13.DLL
     CUDW13.DLL
     CMLS13.DLL
     CMMX01.DLL
     CMPR13.DLL
     CMUT13.DLL
     CMCT13.DLL
     CMBR13.DLL
     CMDW13.DLL
    #ENDIF
     CMLL13EX.LLX     Export Modules (HTML, PDF, RTF, XML, MHTML,...)
     CMLL13OB.LLX     Charting-Object
     CMLL13OC.LLX     OLE-Object
     CMLL13HT.LLX     HTML-Object
     CMLL13PW.LLX     Project Wizard
     CMLL13BC.LLX     PDF 417 / Maxicode Barcode - (Professional Version only)
     CMMX01.CPL       combit mail settings control panel applet
     CMLL13SX.DLL     shell extension for preview files
   #CASE(%Language)
   #OF('English')
     #IF(%LLUseUnicode=%True)
     CULL1301.LNG       !English Language file
     #ELSE
     CMLL1301.LNG       !English Language file
     CMMX0101.LNG
     #ENDIF
     CMLL1301.INF (contains label formats; has to be in the same path of CMLL13.DLL)
     CMLL1301.CHM (Designer help; has to be in the same path of CMLL13.DLL)
   #OF('German')
     #IF(%LLUseUnicode=%True)
     CULL1300.LNG       !German Language file
     #ELSE
     CMLL1300.LNG       !German Language file
     #ENDIF
     CMLL1300.INF (contains label formats; has to be in the same path of CMLL13.DLL)
     CMLL1300.CHM (Designer help; has to be in the same path of CMLL13.DLL)
   #OF('Greek')
     #IF(%LLUseUnicode=%True)
     CULL1319.LNG       !Greek Language file
     CMLS1319.LNG
     #ELSE
     CMLL1319.LNG       !Greek Language file
     CMLS1319.LNG
     #ENDIF
     CMLL1319.INF (contains label formats; has to be in the same path of CMLL13.DLL)
     CMLL1319.CHM (Designer help; has to be in the same path of CMLL13.DLL)
   #OF('French')
     #IF(%LLUseUnicode=%True)
     CULL1318.LNG       !French Language file
     CMLS1318.LNG
     #ELSE
     CMLL1318.LNG       !French Language file
     CMLS1318.LNG
     #ENDIF
     CMLL1318.INF (contains label formats; has to be in the same path of CMLL13.DLL)
     CMLL1318.CHM (Designer help; has to be in the same path of CMLL13.DLL)
   #OF('Catalan')
     #IF(%LLUseUnicode=%True)
     CULL1308.LNG       !Catalan Language file
     CMLS1308.LNG
     #ELSE
     CMLL1308.LNG       !Catalan Language file
     CMLS1308.LNG
     #ENDIF
     CMLL1308.INF (contains label formats; has to be in the same path of CMLL13.DLL)
     CMLL1308.CHM (Designer help; has to be in the same path of CMLL13.DLL)
   #OF('Danish')
     #IF(%LLUseUnicode=%True)
     CULL1313.LNG       !Danish Language file
     CMLS1313.LNG
     #ELSE
     CMLL1313.LNG       !Danish Language file
     CMLS1313.LNG
     #ENDIF
     CMLL1313.INF (contains label formats; has to be in the same path of CMLL13.DLL)
     CMLL1313.CHM (Designer help; has to be in the same path of CMLL13.DLL)
   #OF('Dutch')
     #IF(%LLUseUnicode=%True)
     CULL1313.LNG       !Dutch Language file
     CMLS1313.LNG
     #ELSE
     CMLL1313.LNG       !Dutch Language file
     CMLS1313.LNG
     #ENDIF
     CMLL1313.INF (contains label formats; has to be in the same path of CMLL13.DLL)
     CMLL1313.CHM (Designer help; has to be in the same path of CMLL13.DLL)
   #OF('Hungarian')
     #IF(%LLUseUnicode=%True)
     CULL1321.LNG       !Hungarian Language file
     CMLS1321.LNG
     #ELSE
     CMLL1321.LNG       !Hungarian Language file
     CMLS1321.LNG
     #ENDIF
     CMLL1321.INF (contains label formats; has to be in the same path of CMLL13.DLL)
     CMLL1321.CHM (Designer help; has to be in the same path of CMLL13.DLL)
   #OF('Italian')
     #IF(%LLUseUnicode=%True)
     CULL1324.LNG       !Italian Language file
     CMLS1324.LNG
     #ELSE
     CMLL1324.LNG       !Italian Language file
     CMLS1324.LNG
     #ENDIF
     CMLL1324.INF (contains label formats; has to be in the same path of CMLL13.DLL)
     CMLL1324.CHM (Designer help; has to be in the same path of CMLL13.DLL)
   #OF('Norwegian')
     #IF(%LLUseUnicode=%True)
     CULL1329.LNG       !Norwegian Language file
     CMLS1329.LNG
     #ELSE
     CMLL1329.LNG       !Norwegian Language file
     CMLS1329.LNG
     #ENDIF
     CMLL1329.INF (contains label formats; has to be in the same path of CMLL13.DLL)
     CMLL1329.CHM (Designer help; has to be in the same path of CMLL13.DLL)
   #OF('Portuguese')
     #IF(%LLUseUnicode=%True)
     CULL1331.LNG       !Portugese Language file
     CMLS1331.LNG
     #ELSE
     CMLL1331.LNG       !Portugese Language file
     CMLS1331.LNG
     #ENDIF
     CMLL1331.INF (contains label formats; has to be in the same path of CMLL13.DLL)
     CMLL1331.CHM (Designer help; has to be in the same path of CMLL13.DLL)
   #OF('Russian')
     #IF(%LLUseUnicode=%True)
     CULL1333.LNG       !Russian Language file
     CMLS1333.LNG
     #ELSE
     CMLL1333.LNG       !Russian Language file
     CMLS1333.LNG
     #ENDIF
     CMLL1333.INF (contains label formats; has to be in the same path of CMLL13.DLL)
     CMLL1333.CHM (Designer help; has to be in the same path of CMLL13.DLL)
   #OF('Spanish')
     #IF(%LLUseUnicode=%True)
     CULL1337.LNG       !Spanish Language file
     CMLS1337.LNG
     #ELSE
     CMLL1337.LNG       !Spanish Language file
     CMLS1337.LNG
     #ENDIF
     CMLL1337.INF (contains label formats; has to be in the same path of CMLL13.DLL)
     CMLL1337.CHM (Designer help; has to be in the same path of CMLL13.DLL)
   #OF('Swedish')
     #IF(%LLUseUnicode=%True)
     CULL1338.LNG       !Swedish Language file
     CMLS1338.LNG
     #ELSE
     CMLL1338.LNG       !Swedish Language file
     CMLS1338.LNG
     #ENDIF
     CMLL1338.INF (contains label formats; has to be in the same path of CMLL13.DLL)
     CMLL1338.CHM (Designer help; has to be in the same path of CMLL13.DLL)
   #ENDCASE

   If you are using the procedure RADLLPreview then you will also need:-
   CMLL10O.OCX  This must be registered on your end user's system
  #ENDIF
  #!***************************************** Version 12 Ship List ****************
  #IF(%LLVersion = 'Version 12')
     Combit List & Label files:-
     ---------------------------
    #IF(%LLUseUnicode=%False)
     CMLL12.DLL
     CMLL12XL.DLL
     CMLS12.DLL
     CMBR12.DLL
     CMPR12.DLL
     CMUT12.DLL
     CMCT12.DLL
     CMDW12.DLL
     CMMX01.DLL
    #ELSE
     CULL12.DLL
     CMLL12XL.DLL
     CULS12.DLL
     CUBR12.DLL
     CUPR12.DLL
     CUUT12.DLL
     CUCT12.DLL
     CUDW12.DLL
     CMLS12.DLL
     CMMX01.DLL
     CMPR12.DLL
     CMUT12.DLL
     CMCT12.DLL
     CMBR12.DLL
     CMDW12.DLL
    #ENDIF
     CMLL12EX.LLX     Export Modules (HTML, PDF, RTF, XML, MHTML,...)
     CMLL12OB.LLX     Charting-Object
     CMLL12OC.LLX     OLE-Object
     CMLL12HT.LLX     HTML-Object
     CMLL12PW.LLX     Project Wizard
     CMLL12BC.LLX     PDF 417 / Maxicode Barcode - (Professional Version only)
     CMMX01.CPL       combit mail settings control panel applet
     CMLL12SX.DLL     shell extension for preview files
   #CASE(%Language)
   #OF('English')
     #IF(%LLUseUnicode=%True)
     CULL1201.LNG       !English Language file
     #ELSE
     CMLL1201.LNG       !English Language file
     CMMX0101.LNG
     #ENDIF
     CMLL1201.INF (contains label formats; has to be in the same path of CMLL12.DLL)
     CMLL1201.CHM (Designer help; has to be in the same path of CMLL12.DLL)
   #OF('German')
     #IF(%LLUseUnicode=%True)
     CULL1200.LNG       !German Language file
     #ELSE
     CMLL1200.LNG       !German Language file
     #ENDIF
     CMLL1200.INF (contains label formats; has to be in the same path of CMLL12.DLL)
     CMLL1200.CHM (Designer help; has to be in the same path of CMLL12.DLL)
   #OF('Greek')
     #IF(%LLUseUnicode=%True)
     CULL1219.LNG       !Greek Language file
     CMLS1219.LNG
     #ELSE
     CMLL1219.LNG       !Greek Language file
     CMLS1219.LNG
     #ENDIF
     CMLL1219.INF (contains label formats; has to be in the same path of CMLL12.DLL)
     CMLL1219.CHM (Designer help; has to be in the same path of CMLL12.DLL)
   #OF('French')
     #IF(%LLUseUnicode=%True)
     CULL1218.LNG       !French Language file
     CMLS1218.LNG
     #ELSE
     CMLL1218.LNG       !French Language file
     CMLS1218.LNG
     #ENDIF
     CMLL1218.INF (contains label formats; has to be in the same path of CMLL12.DLL)
     CMLL1218.CHM (Designer help; has to be in the same path of CMLL12.DLL)
   #OF('Catalan')
     #IF(%LLUseUnicode=%True)
     CULL1208.LNG       !Catalan Language file
     CMLS1208.LNG
     #ELSE
     CMLL1208.LNG       !Catalan Language file
     CMLS1208.LNG
     #ENDIF
     CMLL1208.INF (contains label formats; has to be in the same path of CMLL12.DLL)
     CMLL1208.CHM (Designer help; has to be in the same path of CMLL12.DLL)
   #OF('Danish')
     #IF(%LLUseUnicode=%True)
     CULL1212.LNG       !Danish Language file
     CMLS1212.LNG
     #ELSE
     CMLL1212.LNG       !Danish Language file
     CMLS1212.LNG
     #ENDIF
     CMLL1212.INF (contains label formats; has to be in the same path of CMLL12.DLL)
     CMLL1212.CHM (Designer help; has to be in the same path of CMLL12.DLL)
   #OF('Dutch')
     #IF(%LLUseUnicode=%True)
     CULL1213.LNG       !Dutch Language file
     CMLS1213.LNG
     #ELSE
     CMLL1213.LNG       !Dutch Language file
     CMLS1213.LNG
     #ENDIF
     CMLL1213.INF (contains label formats; has to be in the same path of CMLL12.DLL)
     CMLL1213.CHM (Designer help; has to be in the same path of CMLL12.DLL)
   #OF('Hungarian')
     #IF(%LLUseUnicode=%True)
     CULL1221.LNG       !Hungarian Language file
     CMLS1221.LNG
     #ELSE
     CMLL1221.LNG       !Hungarian Language file
     CMLS1221.LNG
     #ENDIF
     CMLL1221.INF (contains label formats; has to be in the same path of CMLL12.DLL)
     CMLL1221.CHM (Designer help; has to be in the same path of CMLL12.DLL)
   #OF('Italian')
     #IF(%LLUseUnicode=%True)
     CULL1224.LNG       !Italian Language file
     CMLS1224.LNG
     #ELSE
     CMLL1224.LNG       !Italian Language file
     CMLS1224.LNG
     #ENDIF
     CMLL1224.INF (contains label formats; has to be in the same path of CMLL12.DLL)
     CMLL1224.CHM (Designer help; has to be in the same path of CMLL12.DLL)
   #OF('Norwegian')
     #IF(%LLUseUnicode=%True)
     CULL1229.LNG       !Norwegian Language file
     CMLS1229.LNG
     #ELSE
     CMLL1229.LNG       !Norwegian Language file
     CMLS1229.LNG
     #ENDIF
     CMLL1229.INF (contains label formats; has to be in the same path of CMLL12.DLL)
     CMLL1229.CHM (Designer help; has to be in the same path of CMLL12.DLL)
   #OF('Portuguese')
     #IF(%LLUseUnicode=%True)
     CULL1231.LNG       !Portugese Language file
     CMLS1231.LNG
     #ELSE
     CMLL1231.LNG       !Portugese Language file
     CMLS1231.LNG
     #ENDIF
     CMLL1231.INF (contains label formats; has to be in the same path of CMLL12.DLL)
     CMLL1231.CHM (Designer help; has to be in the same path of CMLL12.DLL)
   #OF('Russian')
     #IF(%LLUseUnicode=%True)
     CULL1233.LNG       !Russian Language file
     CMLS1233.LNG
     #ELSE
     CMLL1233.LNG       !Russian Language file
     CMLS1233.LNG
     #ENDIF
     CMLL1233.INF (contains label formats; has to be in the same path of CMLL12.DLL)
     CMLL1233.CHM (Designer help; has to be in the same path of CMLL12.DLL)
   #OF('Spanish')
     #IF(%LLUseUnicode=%True)
     CULL1237.LNG       !Spanish Language file
     CMLS1237.LNG
     #ELSE
     CMLL1237.LNG       !Spanish Language file
     CMLS1237.LNG
     #ENDIF
     CMLL1237.INF (contains label formats; has to be in the same path of CMLL12.DLL)
     CMLL1237.CHM (Designer help; has to be in the same path of CMLL12.DLL)
   #OF('Swedish')
     #IF(%LLUseUnicode=%True)
     CULL1238.LNG       !Swedish Language file
     CMLS1238.LNG
     #ELSE
     CMLL1238.LNG       !Swedish Language file
     CMLS1238.LNG
     #ENDIF
     CMLL1238.INF (contains label formats; has to be in the same path of CMLL12.DLL)
     CMLL1238.CHM (Designer help; has to be in the same path of CMLL12.DLL)
   #ENDCASE

   If you are using the procedure RADLLPreview then you will also need:-
   CMLL10O.OCX  This must be registered on your end user's system
  #ENDIF
#!==============================================================================
#GROUP(%AddMethods,%pMethodName,%pMethodPrototype),AUTO
#DECLARE(%MethodsPresent)
#DECLARE(%LastNewMethodsInstance)
#SET(%MethodsPresent,%False)
#SET(%LastNewMethodsInstance,%False)
#FOR(%NewMethods)
  #SET(%LastNewMethodsInstance,%NewMethods)
  #IF(UPPER(CLIP(%NewMethodName))=UPPER(CLIP(%pMethodName)) AND UPPER(CLIP(%NewMethodPrototype))=UPPER(CLIP(%pMethodPrototype)))
    #SET(%MethodsPresent,%True)
    #BREAK
  #ENDIF
#ENDFOR
#IF(%MethodsPresent=%False)
  #ADD(%NewMethods,%LastNewMethodsInstance+1)
  #SET(%NewMethodName,%pMethodName)
  #SET(%NewMethodPrototype,%pMethodPrototype)
#ENDIF
#SET(%DeriveFromBaseClass,%True)
#!==============================================================================
#GROUP(%EmbedVirtuals, %TreeText, %DataText, %CodeText)
#EMBED(%NewClassMethodDataSection,'Local List & Label Method Data Section'),%ActiveTemplateInstance,%pClassMethod,%pClassMethodPrototype,TREE(%TreeText & %DataText)
  #?CODE
  #EMBED(%NewClassMethodCodeSection,'Local List & Label Method Code Section'),%ActiveTemplateInstance,%pClassMethod,%pClassMethodPrototype,TREE(%TreeText & %CodeText)
#!==============================================================================
#GROUP(%ParentCallValid),AUTO
#DECLARE(%Rval)
#CALL(%ParentCallValid(ABC)),%Rval
#RETURN(%Rval)
#!==============================================================================
#GROUP(%FindLocalTemplateInstance, %LookFor),PRESERVE
  #FOR(%ActiveTemplate),WHERE(%ActiveTemplate = %LookFor)
    #FOR(%ActiveTemplateInstance)
      #RETURN(%ActiveTemplateInstance)
    #ENDFOR
  #ENDFOR
  #RETURN(0)
#!==============================================================================
#GROUP (%AddQuotes,*%xParams)
#DECLARE (%Cnt)
#DECLARE (%Len)
#DECLARE (%Def,STRING)
#DECLARE (%xPar,STRING)
#EQUATE  (%Paren,%False)
#EQUATE  (%NewLen,%False)
#EQUATE  (%Start,%True)
  #SET (%Len,LEN(CLIP(%xParams)))
  #SET (%xPar,%xParams)
  #SET (%Def,'')
  #IF (%Len)
    #IF (NUMERIC(SUB(%xPar,1,1)))
        #SET (%Def,'%ActiveTemplateInstance,''')
        #IF (NUMERIC(SUB(%xPar,2,1)))
            #SET(%Start,4)
        #ELSE
            #SET(%Start,3)
        #ENDIF
        #SET(%NewLen,25)
    #ENDIF
    #LOOP FOR(%Cnt,%Start,%Len)
      #CASE (SUB(%xPar,%Cnt,1))
      #OF ('(')
          #SET (%Paren,%True)
      #!
      #OF (')')
          #SET (%Paren,%False)
      #!
      #OF (',')
          #IF (~%Paren AND SUB(%xPar,%Cnt+1,1) = ' ')
             #SET (%Def,CLIP(%Def) & ''',''')
             #SET (%NewLen,%NewLen+3)
             #CYCLE
          #ENDIF
      #!
      #OF (' ')
          #IF (SUB(%xPar,%Cnt-1,1) = ',')
              #CYCLE
          #END
      #END
      #!
      #SET (%Def, LEFT(%Def,%NewLen) & SUB(%xPar,%Cnt,1))
      #SET (%NewLen,%NewLen+1)
      #!
    #ENDLOOP
    #IF  (SUB(%Def,1,1) = '%')
      #SET (%xParams,%Def & '''')
    #ELSE
      #SET (%xParams, '''' & %Def & '''')
    #END
  #ENDIF
#!==============================================================================
#GROUP(%OptionOverrides)
    #DISPLAY('NOTE: Not all the following are supported in beta-2, but will be in final release. The class uses the default values, some of which may or may not be overridden here yet.'),AT(,,180,30),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
    #SHEET
      #TAB('Set up options 1')
        #DISPLAY('Options for the internal SetOption() virtual method'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
        #PROMPT('A&dd vars to fields ',CHECK),%LocDefAddVarsToFields,DEFAULT(%GloDefAddVarsToFields),AT(10),PROP(PROP:Tip,'True: in list projects the formula wizard offers variable<13,10> in addition to fields in table column formula.'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
        #PROMPT('Use e&xporters ',CHECK),%LocDefAllowLLXExporters,DEFAULT(%GloDefAllowLLXExporters),AT(10),PROP(PROP:Tip,'True accepts export modules'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
        #PROMPT('Auto multi-page ',CHECK),%LocDefAutoMultiPage,DEFAULT(%GloDefAutoMultiPage),AT(10),PROP(PROP:Tip,'Let L&L use its page break algorithm when true'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
        #PROMPT('Calc sums on invisible lines ',CHECK),%LocDefCalcSumVarsOnInvisibleLines,DEFAULT(%GloDefCalcSumVarsOnInvisibleLines),AT(10),PROP(PROP:Tip,'When true, sum variables also calculated if data lines suppressed'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
        #PROMPT('Calc sums on partial lines',CHECK),%LocDefCalcSumVarsOnPartialLines,DEFAULT(%GloDefCalcSumVarsOnPartialLines),AT(10),PROP(PROP:Tip,'When true, sum vars are updates as soon as one data line prints, otherwise all <13,10>data lines must print before sum vars are updated'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
        #PROMPT('Compress RTF ',CHECK),%LocDefCompressRTF,DEFAULT(%GloDefCompressRTF),AT(10),PROP(PROP:Tip,'Compresses text in RTF when true.  If false, text is visible in project file'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
        #PROMPT('Compress storage ',CHECK),%LocDefCompressStorage,DEFAULT(%GloDefCompressStorage),AT(10),PROP(PROP:Tip,'Preview data is compressed when true, its a bit slower but saves a lot of disk space.'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
        #PROMPT('Convert CR/LF ',CHECK),%LocDefConvertCRLF,DEFAULT(%GloDefConvertCRLF),AT(10),PROP(PROP:Tip,'CR/LF combinations in fields and vars translate to LF and prevent duplicate line breaks when true'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
        #PROMPT('&Delay Table Header ',CHECK),%LocDefDelayTableHead,DEFAULT(%GloDefDelayTableHead),AT(10),PROP(PROP:Tip,'Prints the table header when calling Print or first printing a field.'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
        #PROMPT('&Show error when graphic not found ',CHECK),%LocDefEeOnFileNotFound,DEFAULT(%GloDefEeOnFileNotFound),AT(10),PROP(PROP:Tip,'Show error if graphic file not found when printing if true'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
        #PROMPT('Escape closes preview',CHECK),%LocDefEscClosesPreview,DEFAULT(%GloDefEscClosesPreview),AT(10),PROP(PROP:Tip,'When true, Escape key closes preview window'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
        #PROMPT('Force font character set ',CHECK),%LocDefForceFontCharSet,DEFAULT(%GloDefForceFontCharSet),AT(10),PROP(PROP:Tip,'When true, all fonts in system offered in font selection <13,10>combo boxes or support charset of default LCID'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
        #PROMPT('Show help buttons ',CHECK),%LocDefHelpAvailable,DEFAULT(%GloDefHelpAvailable),AT(10),PROP(PROP:Tip,'When true, shows the help buttons'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
        #PROMPT('Immediate last page ',CHECK),%LocDefImmediateLastPage,DEFAULT(%GloDefImmediateLastPage),AT(10),PROP(PROP:Tip,'When true a non-finished object immediately forces LastPage() resetting all appended objects'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
      #ENDTAB
      #TAB('Set up options 2')
        #PROMPT('Incremental preview ',CHECK),%LocDefIncrementalPreview,DEFAULT(%GloDefIncrementalPreview),AT(10),PROP(PROP:Tip,'When true, preview displays when 1st page created, adding further pages incrementally.'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
        #PROMPT('Inter-character spacing ',CHECK),%LocDefInterCharSpacing,DEFAULT(%GloDefInterCharSpacing),AT(10),PROP(PROP:Tip,'When true, spaces between chars for block <13,10>justified text varies, otherwise only spaces are varied'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
        #PROMPT('Font descent on ',CHECK),%LocDefIncludeFontDescent,DEFAULT(%GloDefIncludeFontDescent),AT(10),PROP(PROP:Tip,'The logfont member is considered when calculating line distances.  <13,10>This leads to wider line space, but prevents extreme fonts from being cut off'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
        #PROMPT('Hide fax variables ',CHECK),%LocDefNoFaxVars,DEFAULT(%GloDefNoFaxVars),AT(10),PROP(PROP:Tip,'Fax variables are visible in Designer when false'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
        #PROMPT('Do not warn of previous version',CHECK),%LocLLWarnVersion,DEFAULT(%GloLLWarnVersion),AT(10),PROP(PROP:Tip,'If True, conversion takes place to the new version with no warnings.'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
        #PROMPT('Wrap page footer ',CHECK),%LocDefNoFooterPageWrap,DEFAULT(%GloDefNoFooterPageWrap),AT(10),PROP(PROP:Tip,'When true, footers that wont fit below the table start on the next page'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
        #PROMPT('Hide mail variables ',CHECK),%LocDefNoMailVars,DEFAULT(%GloDefNoMailVars),AT(10),PROP(PROP:Tip,'When false, mail variables are visible in Designer'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
        #PROMPT('No &Table Checking ',CHECK),%LocDefNoTableCheck,DEFAULT(%GloDefNoTableCheck),AT(10),PROP(PROP:Tip,'For list projects, no check is made to ensure at least one table is present.'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
        #PROMPT('No &Parameter Checking ',CHECK),%LocDefNoParamCheck,DEFAULT(%GloDefNoParamCheck),AT(10),PROP(PROP:Tip,'List && Label will not check paramets passed to its DLL, <13,10>which results is faster processing speed.'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
        #PROMPT('Explorer style dialogs ',CHECK),%LocDefOFNDialogExplorer,DEFAULT(%GloDefOFNDialogExplorer),AT(10),PROP(PROP:Tip,'When true, dialogs are in Explorer style, otherwise use the old dialog style'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
        #PROMPT('Suppress places bar in dialogs ',CHECK),%LocDefOFNDialogNoPlacesBar,DEFAULT(%GloDefOFNDialogNoPlacesBar),AT(10),PROP(PROP:Tip,'When false, the full dialog displays'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
        #PROMPT('Backup project files ',CHECK),%LocDefProjectBackup,DEFAULT(%GloDefProjectBackup),AT(10),PROP(PROP:Tip,'When true Designer makes backup project files'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
        #PROMPT('One table only ',CHECK),%LocDefOnlyOneTable,DEFAULT(%GloDefOnlyOneTable),AT(10),PROP(PROP:Tip,'When true, only one table allowed, a second list object wont be allowed'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
        #PROMPT('Use current time ',CHECK),%LocDefRealTime,DEFAULT(%GloDefRealTime),AT(10),PROP(PROP:Tip,'Time() and Now() function in L&L always use current time, <13,10>otherwise set once when project loads'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
        #PROMPT('High resolution barcodes ',CHECK),%LocDefResolutionCompatibleto9X,DEFAULT(%GloDefResolutionCompatibleto9X),AT(10),PROP(PROP:Tip,'When true can lead to display issues on Win 9x <13,10>machines when showing in preview'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
      #ENDTAB
      #TAB('Setup options 3')
        #PROMPT('Scalable fonts only ',CHECK),%LocDefScalableFontsOnly,DEFAULT(%GloDefScalableFontsOnly),AT(10),PROP(PROP:Tip,'Font dialogs restricted to scalable fonts like TrueType and Vector fonts when true'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
        #PROMPT('Save user info in project file ',CHECK),%LocDefSetCreationInfo,DEFAULT(%GloDefSetCreationInfo),AT(10),PROP(PROP:Tip,'L&L stores user info in the project and preview file.'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
        #PROMPT('Show internal variables ',CHECK),%LocDefShowPredefVars,DEFAULT(%GloDefShowPredefVars),AT(10),PROP(PROP:Tip,'Show internal L&L vars  in variable selection dialog of the formula wizard'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
        #PROMPT('Sketch color depth ',DROP('8|16|32')),%LocDefSketchColorDepth,DEFAULT(%GloDefSketchColorDepth),PROP(PROP:Tip,'Sets the color depth of the sketch file file the file selection dialog'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
        #PROMPT('Remove blank lines at end of RTF ',CHECK),%LocDefSkipReturnAtEndOfRTF,DEFAULT(%GloDefSkipReturnAtEndOfRTF),AT(10),PROP(PROP:Tip,'RETF text may contain blank lines at the end, when true these are removed'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
        #PROMPT('S&ort Variables ',CHECK),%LocDefSortVars,DEFAULT(%GloDefSortVars),AT(10),PROP(PROP:Tip,'If true, variables are sorted alphabetically.'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
        #PROMPT('S&pace Optimization ',CHECK),%LocDefSpaceOptimize,DEFAULT(%GloDefSpaceOptimize),AT(10),PROP(PROP:Tip,'Uses the space optimization feature for new paragrpahs in <13,10>text objects and new fields.'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
        #PROMPT('S&upervisor Option ',CHECK),%LocDefSupervisor,DEFAULT(%GloDefSupervisor),AT(10),PROP(PROP:Tip,'If true all menu options are allowed and objects unlocked.'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
        #PROMPT('&Show page breaks ',CHECK),%LocDefSupportTextPageBreak,DEFAULT(%GloDefSupportTextPageBreak),AT(10),PROP(PROP:Tip,'The page break checkbox of the text object is shown and can be checked by the user.'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
        #PROMPT('&Case Sensitive Variables ',CHECK),%LocDefCaseSensitiveVars,DEFAULT(%GloDefCaseSensitiveVars),AT(10),PROP(PROP:Tip,'Variables and field names are case sensitive.'),PROP(PROP:FontColor,7B0012H),PROP(PROP:FontStyle,400)
      #ENDTAB
    #ENDSHEET
#!==============================================================================

