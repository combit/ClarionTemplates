#!================================================================================
#!                  Print Queue Extension
#!================================================================================
#CONTROL(LLPrintQueueButton,'List and Label Print Queue button - print from Queue'),MULTI,WINDOW,REQ(GlobalListLabel),HLP('List & Label Print Button')
#BUTTON('List && Label Print from Queue Options'),at(10,,175,15)
  #PROMPT('Name of Queue: ',FIELD),%LLPrintQueue,REQ                           #!Prompt for Queue name
  #SHEET,HSCROLL,ADJUST
    #INSERT(%StandardTabs)
   #ENDSHEET
#ENDBUTTON
  CONTROLS
  BUTTON('Print'),AT(,,64,14),USE(?LLPrintBtn),#ORIG(?LLPrintBtn)
 END
#ATSTART
  #DECLARE(%PrintControlButton)
  #FOR(%Control), WHERE(%ControlInstance = %ActiveTemplateInstance)
    #SET(%PrintControlButton, %Control)
  #ENDFOR
#ENDAT
#LOCALDATA
LLExportFilesQ      QUEUE,PRE(LLExpf)             !Print queue extension
Filename              CSTRING(255)
                    END
#ENDLOCALDATA
#AT(%LocalDataClassData)
  #INSERT(%LLDATA),NOINDENT
  #IF(%InvoiceStyle=%TRUE)
LLInvoiceBreak          LIKE(%BreakField)
  #ENDIF
  #FOR(%LLOtherBreakFields)
    #SET(%LLDeclareLocBreakField,'LLBreak' & %LLOtherBreakField)
%LLDeclareLocBreakField    LIKE(%LLOtherBreakField)
  #ENDFOR
LLViewPercentage        LONG
LLTotalRecordsInView    LONG
LLRecordPrinted         LONG
LLPrintQueuePointer     LONG
#ENDAT
#AT(%ProcedureRoutines)
#!********************* Start Print from view only ***********
  #INSERT(%LLRoutines,''),NOINDENT
  #INSERT(%Printing,%False),NOINDENT
  #IF(%LLVersion <> 'Version 6')
    #INSERT(%ExportFunctions),NOINDENT
  #ENDIF
  #INSERT(%SendVarsLL,%False),NOINDENT
  #INSERT(%FieldGen,%RepFiles,%True,%TRUE),NOINDENT
  #INSERT(%ManualVariables),NOINDENT
  #INSERT(%Flags)
  #INSERT(%LLDefineVars),NOINDENT
  #INSERT(%PrintOutToLL),NOINDENT
#!********************* End Print from view only ***********
#ENDAT
#AT( %ControlEventHandling, %PrintControlButton, 'Accepted'),PRIORITY(4499)
  #DECLARE(%ReturnVals,String)
  #DECLARE(%VaribleQty,String)
  #DECLARE(%TotalToPrint)
  #DECLARE(%IsQtyVariable)
  #SET(%ReturnVals,'(' & %Params)
  #IF(%RunDirect <> 'Use Variable to Determine Default')
  GlobalRequest = SelectRecord                   
  IF %RepLayProc%ReturnVals,LLAction,LLReportName,LLReportTitle,LLReportType,LLPrinterOptions,LLOutputFile,LLOutPutDir) = False 
    #EMBED(%LLCancelSelectLayout,'LL Cancel selecting Layout')
    CYCLE
  ELSE
    LLReportName = CLIP(LLReportName)
    LLNameNoPath = LLReportName
    #EMBED(%LLAfterSelectLayout,'LL After selecting Layout')
    DO LLInitReport
    IF LLPrinterOptions = True
      LLResult = LL.PrintOptionsDialog(LLhJob,LLHWind,LLReportTitle)
      IF LLResult <> 0
        #EMBED(%LLAfterPrinterOptions,'LL After Displaying printer options')
        LLResult = LL.PrintEnd(LLhJob,0)
        LL.CloseJob(LLhJob)
        POST(EVENT:CloseWindow)
        RETURN(LEVEL:Fatal)
      END
    END
    LLResult = LL.PrintGetOption(LLhJob,LLOptionCopiesSupported)
  END
  #ELSE
  LLL_:Ref = %PrimaryValue
  Access:LL_RepLay.TryFetch(LLL_:RefKey)
  LLReportName = clip(LLL_:FileName)
  LLReportTitle = LLL_:Description
  CASE CLIP(LLL_:Type)
  OF 'Label'
    LLReportType = 1
  OF 'List'
    LLReportType = 2
  OF 'Card'
    LLReportType = 3
  END
  LLAction = %PreviewOpt
  LLPrinterOptions = %PrinterOpt
  RFIPages = LLL_:Pages
  #EMBED(%LLAfterSelectLayout,'LL After selecting Layout')
  DO LLInitReport
  IF LLPrinterOptions = True
    #IF(%LLNonMDI=%False)
    Unlockthread()
    #ENDIF
    LLResult = LL.PrintOptionsDialog(LLhJob,LLHWind,LLReportTitle)
    #IF(%LLNonMDI=%False)
    LockThread()
    #ENDIF
    IF LLResult <> 0
      #EMBED(%LLAfterPrinterOptions,'LL After Displaying printer options')
      POST(EVENT:CloseWindow)
      RETURN(LEVEL:Fatal)
    END
  END
  LLResult = LL.PrintGetOption(LLhJob,LLOptionCopiesSupported)
  #ENDIF
  SetCursor(CURSOR:Wait)
  LLRecordPrinted = 0
  LLTotalRecordsInView = RECORDS(%LLPrintQueue)
  LOOP LLPrintQueuePointer = 1 TO RECORDS(%LLPrintQueue)
    GET(%LLPrintQueue,LLPrintQueuePointer)
    #EMBED(%InLLPrintAfterGettingQueue,'LL Print Queue, After retrieving Queue record')
    DO PrintoutToLL
    #EMBED(%InLLPrintAfterPrintingQueue,'LL Print Queue, After Printing Queue record')
  #IF(%ProgressType <> 'Clarion Progress Bar' AND %ProgressType <> 'No Progress Window')
    LLRecordPrinted += 1
    #EMBED(%LLFreshProgress,'Before Refresh Progress Window')
    LLViewPercentage = (LLRecordPrinted / LLTotalRecordsInView) * 100
    #IF(%ProgressTextType='Static Text')
    LLPrintText = '%PrintText'
    #ELSE
    LLPrintText = %DynamicText
    #ENDIF
    LLResult = LL.PrintSetBoxText(LLhJob, LLPrintText, LLViewPercentage)
  #ENDIF
  END
    SetCursor(Cursor:Arrow)
    CASE LLReportType
    OF LL_Project_List
      LLResult = LL.PrintFieldsEnd(LLhJob)
    END
    LLResult = LL.PrintEnd(LLhJob,0)
    LLSavePath = PATH()
    IF LLAction = 2 AND LLRecordPrinted > 0 AND LLAbort = False              #<!Preview
    #EMBED(%LLBeforePreviewDisplay,'LL Before Preview Call')
  #IF(%NotUseLLPreviewer = %True)
      %LLPreviewProcedure(CLIP(LLPath) & CLIP(LLNameNoPath) & '.ll')
  #ELSE
    #INSERT(%PreviewOptions)
    #IF(%LLNonMDI=%False)
      UNLOCKTHREAD()
    #ENDIF
      LLReportName = CLIP(LLReportName)
      LLResult = LL.PreviewDisplay(LLhJob,LLReportName,LLPath,LLHWind)
    #IF(%LLNonMDI=%False)
      LOCKTHREAD()
    #ENDIF
  #ENDIF
      LLReportName = CLIP(LLReportName)
      LLResult = LL.PreviewDeleteFiles(LLhJob,LLReportName,LLPath)
      #EMBED(%AfterDeletePreviewFiles,'LL After deleting preview files')
    END
    #EMBED(%BeforeCloseLLJob,'LL Before Closing LL Print job')
  #INSERT(%PopulateExportedFiles)
    LL.CloseJob(LLhJob)
    SetPath(LLSavePath)
#ENDAT
